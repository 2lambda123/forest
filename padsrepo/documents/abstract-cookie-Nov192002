		PADS: Processing Arbitrary Data Streams

		  Kathleen Fisher and Robert Gruber

			  *Work in Progress*

AT&T in general and research in particular generates and receives many
high-volume data streams on a regular basis.  These streams contain
data that can be mined very profitably.  Unfortunately, these streams
typically come in legacy formats over which we have no control.  It
often requires weeks to understand a new data feed and write a parser
to process the data, a process that is both tedious and error-prone.
Often, this hard-won understanding of the data ends up embedded in 
parsing code, making long-term maintenance difficult for the original
writer and sharing the knowledge with others still more difficult.

We have a preliminary design of a declarative data-description
language (PADSL) expressive enough to describe the data feeds we see
in practice, including both ASCII and binary data.  From this
description, we generate a C library for manipulating the data.
This library contains an in-memory representation for the data,
parsing functions, and accumulator functions (which serve to summarize
the data). Each piece of the data description generates a parsing
function, so the library user can choose to read the whole file at
once or (more likely) one record at a time.  Each parsing function
returns both the in-memory representation of the associated data and
an error descriptor.  When the parser encounters a bug in the
values in the data, it simply sets the appropriate error descriptor
and continues processing.  This ability to continue is crucial when
processing massive data files that contain some small percentage of
errors. 

In this talk, we describe the current design of the data description
language and the C library we produce. We also discuss some
applications that are in progress.  Feedback regarding
data sources that challenge the expressiveness of PADSL and other
potential uses of the tool will be much appreciated.

