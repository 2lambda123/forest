/* ***************************************
 * PADS GUI project  (tentative title: LaunchPADS)
 *
 * Summer 2005 
 *
 * Mark Daly
 * Princeton University
 * Department of Computer Science
 * Professor David Walker, Advisor
 * ***************************************

 * ***************************************
 *               Change Log
 * ***************************************
 
 * 2005.08.18
   -Fixed a number of bugs in the Carbon port (again, thanks to Kathleen)
   -Fixed a bug that put stop expressions at the wrong place in
    tree elements (thanks to Kathleen for finding this one)
   -Renamed certain files to provide more consistent naming scheme
   -Added to in-code documentation
   -Updated manual to reflect change in code structure

 * 2005.08.17
   -Replaced modular code with new version - now code is updated and
    modularized
   -Got modular version to work - must be updated before release
   -Fixed a bug in lp_CodeGen.h (bad #endif placement)
   -Made some corrections to the manual

 * 2005.08.16
   -Found and fixed a compile-time bug when trying to re-port the UI to	
    wxWin

 * 2005.08.15
   -Finished the first version of the developer manual and last few 
    top-level pages
   -Added a new "clean" version of the code, with more comments for the
    new sections and much of the old, unused code taken out.  It hasn't	
    been compiled yet, but it looks much nicer
   -Fixed a bug that resulted in formatter code not being generated

 * 2005.08.12
   -Added mechanism to automatically load definition file with same name as 
    header file (in same directory) for symbol table generation
   -Fixed a missing feature in the code generation wizards:
    previously, it was assumed that the PADS_TY macro for tool templates
    had a value which could be universally applied - this was proven 
    incorrect; to correct this, features have been added to 1) allow the 
    user to select a PADS definition from which to generate a nonterminal
    symbol table, 2) extract names of all nonterminal elements in that 
    definition, 3) allow the user to select from those names or use any 
    custom nonterminal name in the wizard, and 4) apply this new naming 
    mechanism to the code templates.

 * 2005.08.11
   -Found and fixed a bug that destroys the highlighting mechanism under 
    GTK, but is required for Carbon (look for "SetDefaultCellBackgroundColour")
   -Found a bug in the tool integration modules - over generalization leads
    to back compilation in the modules, requiring that another user-defined
    field be added to the wizards' "basic" mode to specify the "record"
    element for each type.  
   -Made changes to make Carbon build updates easier
   -Added attributes in state saving/loading mechanisms to collapse/expand
    tree elements
   -Fixed bug in state loading mechanism that disregarded type selection 
    attribute
   -Added attributes in state saving/loading mechanisms to maintain 
    cursor position and cell visibility

 * 2005.08.10
   -Successfully replicated pads/demo/wsl.p from within the GUI
   -Made major corrections to the code generation functions

 * 2005.08.09
   -Made significant enhancements (workarounds) to the tree view system to
    increase flexibility in adding user defined types to trees and dealing
    with typedefs.
   -Fixed both bugs (and yes, part (3) of the first bug was the hardest to
    fix).
   -While trying to fix the previous bug, found another that 
    deletes nonterminal elements in the tree when moving nodes around.
   -Found a major bug in the way the app handles Popts (treats them like
    composite types rather than qualifiers).  This will have to be fixed
    as follows: 1) change grid layout to make sure elements with Popt 
    parents start at the left bound of Popts (so only one child region 
    per Popt); 2) change tree to make sure Popt parents are only allowed
    one child node; 3) change code printing routines to handle Popt qualifier
    (this should be relatively simple - instead of recurring on print, 
    just print contents immediately after Popt).

 * 2005.08.08
   -Fixed a problem with file paths that caused a new config file to be 
    created in the working directory from which the app was started - 
    only one config file is saved now (in the same directory as the app)
   -Improved the layout/appearance of the documentation.

 * 2005.08.05
   -Compiled the GUI using Motif - it works better than X11, but not as 
    well as GTK or Carbon (some resizing problems, vanishing controls and
    grid cell contents, no automatic v-scroll bar on the code view)
   -Fixed a bug that created an off-by-one error in the tree control 
    "type" combobox (nonterminals were set the +1 type in the combobox)

 * 2005.08.04
   -Ported GUI to wxMac (Carbon only) - compiled binary is now available

 * 2005.08.03
   -Compiled the GUI using wxX11 instead of wxGTK - it works, but not 
    gracefully (all sorts of rendering errors, elements with red backgrounds
    don't show up, menu and status bar get clipped and not redrawn, sizers
    don't properly size to the windows [some too big, some too small], etc.)
   -Added a preference feature to facilitate the de/activation of the 
    tree control enable/disable feature
   -Added a feature to the tree controls which enables/disables controls
    according to the selected type
   -Added more to documentation

 * 2005.08.02
   -Found and fixed a bug that left windows disabled on failed 
    state save/load
   -Added more to documentation

 * 2005.08.01
   -Found a bug that prevents the selection mode radiobox from being
    changed on a state load; however, it looks like the bug is an
    internal wxWidgets problem, and it can't be fixed from this end
   -Added grid control state saving to XML state mechanism
   -Wrote initial overview page
   -Continued building template and style sheet for documentation

 * 2005.07.29
   -Started building template and style sheet for documentation
   -More bug fixes with predicate printing, automatic Peor string 
    termination, and user defined type formatting
   -Fixed some bugs with syntax highlighting in the code generating 
    functions and incorrect error messages from file dialogs
   -Implemented backed for state recording and playback (looks like it 
    works properly)
   -Fixed a bug in the new sibling tree function that allowed the 
    creation of improperly typed siblings
   -Fixed a mistake in the tree element printing routine when dealing 
    with enumfields
   -Tried to fix the memory leaks in SaveState() but only ended up causing
    seg faults

 * 2005.07.28
   -Built a control panel for saving/playing back state sequences from a 
    file, but it doesn't handle the "show" command, so it won't work 
    properly yet.
   -Added limited qualifier printing facility (for Precord, Psource, etc.)
   -Added compilation/execution paths for the formatter and XML converter
    tools
   -Fixed a ridiculous bug in the tree/code generators that broke all
    pEnumFields starting with 'P'
   -Fixed a nasty bug in the state save/load mechanisms that didn't load
    cells/tree names consisting only of whitespace (despite setting a 
    parameter in the XML library that should have read all whitespace)
   -Did some profiling of the GUI using memprof and found some serious
    leaks in the XML loading/saving functions and a less problematic
    one in the tree generation function - these will have to wait for 
    now (until I figure out how to fix them), but they'll eventually
    need to be fixed

 * 2005.07.27
   -Finished call chain for accumulator (works as template for
    other tools) - users can now start with a padsc generated 
    c/header pair and build/run an accumulator from the UI
    (N.B. the chain goes end to end - intermediate entry points must
    still be established)
   -Worked on call chain to compile auto-generated code - 
    lib/include feature addition needed in exec functions/prefs 
    to make autocompilation work
   -Made enhancements to the accumulator wizard

 * 2005.07.26
   -Implemented wizard to specify macro defs for accumulator
    (generalizable to other tools through simple find/replace)
   -Fixed the import controls's arbitrary record delimiter mechanism 
    (sort of - it seems like the default "\n" can't be overridden 
    by replacing it with other delimiters).

 * 2005.07.25
   -Started updating import control to handle arbitrary record delimiters,
    but introduced a strange bug with the printf-style formatting 
    (will have to be fixed later, though)
   -Added "Change Name" and "Change Type" elements to the tree view
    context menu, and added backing facility with proper error checking
    and reporting

 * 2005.07.22
   -Added mechanism to generate some simple C code, compile it, and 
    run the compiled program
   -Added mechanism to compile *.p files using padsc (at a location 
    specified in the preferences dialog)
   -Formalized XML element names (migrated to a header and converted 
    everything to macros).  Let's hope nothing like this ever need be
    done again.  
   -Added a dialog to run and report output/errors from shell commands

 * 2005.07.21
   -Added paths/CCopts to saved prefs settings
   -Added controls in prefs dialog for paths to PADS components (no backend
    yet, though)
   -Fixed a bug that caused a segfault on loading an XML state file with 
    an empty or uninitialized grid
   -Added some graphical diversions for the user while XML files load/save
   -Added an option/preferences control to disable log messages on XML
    state saves (presumably, saving will happen frequently while opening
    will happen infrequently)

 * 2005.07.20
   -Finished the XML state loading mechanism and tested it (make a state, save 
    the state, clear the state, reload the state, save the reloaded state, diff
    the original save and the reloaded save - the diffs come out clean)
   -Implemented a state loading error counter for load warnings, but it doesn't
    seem to work properly (the error number is significantly higher than the 
    number of warning messages displayed), so it has been temporarily 
    deactivated
   -Implemented XML state loading for tree controls
   -Implemented XML state loading for tree
   -State loading errors now produce log messages which are displayed after 
    the state has been loaded
   -Added copious error checking for state loading 

 * 2005.07.19
   -Implemented XML state loading for grid
   -Implemented XML state loading for import view
   -Implemented XML state writing for import, grid, tree view, and tree 
    controls (code will be re-generated from the tree instead of wasting 
    disk space)

 * 2005.07.18
   -Implemented file dialogs for load/save XML functions on toolbar
   -Worked out some tests of the tinyxml library (available at 
    <http://www.grinninglizard.com/tinyxml/>) to check out how it 
    functions and to get comfortable with the API
   -Devised an XML layout to do gui state saving and incremental changes
    for demo recording (didn't work up a full DTD since the XML library
    we're going to use doesn't support DTDs)

 * 2005.07.07
   -Added *lots* of new comments 
   -Added a feature to switch between text and background coloring in the 
    tree view (thanks to Yitzhak for the idea for this)

 * 2005.07.06
   -Meeting (no new code)

 * 2005.07.05
   -Able to compile on MSW using vc++ with minimal changes - 
    project files to follow with later releases of source code
 
 * 2005.07.01
   -Implemented persistent font settings, but removed it again after 
    I noticed that it ruined the syntax highlighting scheme (I can't 
    imagine why though...)
   -Found and fixed a *really* nasty segfault bug in the grid back/reset 
    facilities caused by double deletion of arrays in 
    midGridTypeLevels/UDefIDLevels (code copied from a TypeLevels
    prototype was left unmodified for its UDefIDLevels companion)
   -Found the pads base class parsers in pads/padsc/include/ptypes - 
    we'll need these later to build a better type guesser
   -Tried to highlight on find in code, but there seems to be a bug in the 
    selection mechanism under GTK (or I am doing something very wrong - 
    the text vanishes on selection after a record has been imported and 
    processed)
   -Added a "find in code" option to the tree context menu
   -Added an option to replace grid cells on previous levels with their
    selected types

 * 2005.06.30
   -Finally managed to get the terminal type guessing routine to pick 
    out IP addresses (found the problem in the RegEx syntax, which 
    is caused by an inexplicable lack of advanced regex syntax on this machine)
   -Fixed a bug in the syntax highlighting saving/application mechanism
   -Implemented a config file system and added all the prefs settings to it.
    This should only ever run from a file, so we won't need to touch the 
    registry.
   -Implemented variable default layout
   -Implemented the font and color option dialogs - only the layout option
    remains, but requires a config file.  
   -Implemented backing functions for prefs dialog - users can now change 
    all but the font, color, and layout settings (those will follow shortly)

 * 2005.06.29
   -Tried to fix the pIp identifier RegEx without success (for some reason
    it won't even recognize simple cases that obviously match the IP pattern)
   -Code cleanup (obsolete code removal)
   -Finished building and placing prefs menu controls
   -Implemented a "grayscale" mode to enhance accessibility
   -Fixed formatting of tree elements names to make the more readable
   -Completely rewrote color management system for highlighting/tree 
    backgrounds for added flexibility
   -Rewrote the wxPADS flags to improve clarity
   -Added context menu for tree control
   -Added a few menus for a preference dialog and a help system

 * 2005.06.28
   -Added functionality for set/clear predicate/custom text buttons
   -Tried to work out a key accelerator for the tree view, but was
    unable to get it to work
   -Added types to the labels in the tree view and changed the spacing
    to make things more readable
   -Fixed a problem with spacing in the code generator.  It's not
    perfect yet, but at least the types are separated from the names.
   -Fixed a potential problem with switch/case statements (the two 
    now require each other like enum/enumfield) 
   -Implemented the movement buttons for tree items
   -Gave up on the idea of inter-level movement of tree nodes.  If
    people want to move nodes between levels, they can make the new
    ones themselves - I don't want to have to rebuild the tree on
    every move.  The controls have been switched to "top" and "bottom"
    instead of "left" or "right."  
   -Started adding asserts for all the constructor calls... argh...
   -Implemented add/delete functions for all make/delete buttons in 
    tree control panel
   -Added a control to delete the tree
   -Added a tree init function to make sure the tree always contains 
    a root and a nonterminal source element
   -Tracked down a bothersome seg fault caused by improperly initialized
    int** arrays (likely caused by a heap shift which caused the array
    to span page bounds or something of that nature)
   -Finished implementing/re-implemented "Make Sibling" functionality
    using insert rather than an append/delete loop

 * 2005.06.27
   -Fixed a z-order problem with the buttons on the left control panel
   -Added a context menu for the stop expression input field with various
    stop expression prototypes
   -Added a key-based single cell get attributes functionality for grid/
    right control panel (ctrl-g)
   -Extended grid set from keyboard functionality to cycle through 
    current mode's types on repeated mode set key commands
   -Added a feature to set the grid edit mode from the keyboard
   (ctrl-[n,d,t,f])
   -Re-implemented key command handler (using accelerators this time)
    which should be more easily extensible than the last method

 * 2005.06.24
   -Implemented get (tested) and set (untested) attributes for tree control
   -Fixed stopexpression complications
   -Started writing functions to back left panel controls
   -Added a "back" button to the grid controls to allow users to regress
    one level in the grid
   -Fixed yesterday's segfault in the Enum field type (due to a lost %s 
    in a printf statement)
   -Made some improvements to the controls' layout, tried to make
    things line up a bit better

 * 2005.06.23
   -Added validator for PADS name inputs (now accepts only [A-Za-z0-9_])
   -Added a context menu of qualifier types for the argument input field
   -Fixed some problems with code generation
   -Made terminal types identifiable so consecutive groupings of similar 
    type will be rendered in the tree/code as separate entities
   -Fixed some sizing issues with the tree controls
   -Switched terminal grid coloring from type-dependent mode to ID(group)-
    dependent mode
   -Implemented restrictions on use of Enums and Enum fields
   -Bug: enumfields now no longer work (see line 2833) - segfault
    on tree build

 * 2005.06.22
   -Added clear control to prototype selection window
   -Implemented crude name validation system (for reserved words)
   -Added Enum/Enum field facilities to grid parser/grid menu components
   -Added more controls for tree view
   -Implemented printing routines for terminal PElements
   -Implemented recursive printing of code tree (not tested/linked to UI)
   -Implemented crude syntax highlighting mechanism for code view
   -UI Linked and tested (briefly) the code generation features, which see
    to work

 * 2005.06.21
   -Wrote this change log
   -Implemented grid type parsing and tree construction
   -Implemented tree element type-based formatting 
   -Implemented a very simple PADS class guessing routine
    which currently handles only ints, floats, chars, and strings
   -The guessing routine now determines if a string should have 
    the first character of the next element as a terminator, or 
    should be of fixed width
 

 * ***************************************
 *               Description
 * ***************************************
 * LaunchPADS is a graphical code generation 
 * and definition development application 
 * targeted at those new to the PADS language.
 * LaunchPADS allows users to perform "live"
 * PADS definition design, using the data 
 * for which the PADS definition is intended
 * as a template for the code's construction.
 * Users may import a small sample of real world
 * data, graphically isolate portions of a 
 * prototype key, and have LaunchPADS 
 * automatically generate a definition tree 
 * based on user input.  This tree can then
 * be fine-tuned by the user, and used
 * to create a definition of the model data
 * in the PADS language.  After a definition 
 * has been generated, it can be compiled 
 * from within LaunchPADS using the PADS
 * compiler.  The resulting C code and
 * associated header file can then be used to
 * generate, compile, and/or execute generic
 * tools on data conforming to the structure
 * specified in the definition.
 * ***************************************

 * ***************************************
 *              Dependencies
 * ***************************************

 * For a build from source:
   -PADS and related libraries (see www.padsproj.org)
   -wxWidgets libraries (architecture specific, 
   available from wxwidgets.org)
   -TinyXML source code (available at 
   <http://www.grinninglizard.com/tinyxml/>)

 * ************************************ */

