Typing Directories

1. motivating examples
   - padswebsite
        missing files; wrong place; wrong permissions; wrong links
   - pads code base: locations, permissions, takelists
   - corald monitoring system
   - cvs repository structure
   - linux standard for where files are located
   - cabal files
   - haskell source documentation
   - graphics data for padl paper

2. note:
   files contain information about the *structure* of other parts of
   the system.
   file names encode semantic information
   meta-data about owners, permission, etc. is important
   presence and absence information is important


2. possible uses
   - documenting the desired structure 
       where can I go to find...
       where should I put particular files
       output of configuration tools that scan system?
   - checking the current state
       does the existing system match the description?
       missing files, wrong permissions, owners, stale data
       reporting extra files
   - fixing current state
       repair permissions, owners
   - programmatic interface
       connect a specification to a path on disk
       construct an in-memory representation (lazily)
       goal: transparent access to data on disk
             w/accesses guaranteed to succeed if passes check
	     (and no modifications in mean time)
   - other ideas?

Sample descriptions

CVS description
Part of pads website?

Implementation Choices
  We'd like to use Haskell
    - support for laziness
    - support for type-directed programming
  Feedback request: What's the best implementation strategy?

Design Constraints
 0. Integrate data description and directory spec.
 1. Single specification 
 2. Data-specific representations (with records)

Ideal:
  Haskell type P to express pads descriptions
  p :: P corresponds to particular description
  f p produces term of type p_t, 

I believe this is not possible, but would love to be proven wrong.
