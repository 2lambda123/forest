- Reduce.dotest();

//an empty tuple becomes a nil
From:
Tuple
End Tuple
To:
''


//empty choice becomes a nil
From:
Choice
End Choice
To:
''


//degenerate tuple is removed
From:
Tuple
    letters
End Tuple
To:
letters


//degenerate sum removed
From:
Choice
    letters
End Choice
To:
letters


//shows how iteratively the sums
//and tuples are reduce to a nil
From:
Tuple
    Choice
        Choice
        End Choice
    End Choice
End Tuple
To:
''


//nested tuples
From:
Tuple
    letters
    Tuple
        int
        int
        int
        int
    End Tuple
    letters
    Tuple
        letters
        letters
        int
    End Tuple
End Tuple
To:
Tuple
    letters
    int
    int
    int
    int
    letters
    letters
    letters
    int
End Tuple


//nested choices
From:
Choice
    Choice
        int
        letters
    End Choice
    Choice
        'c'
        /*/
    End Choice
    int
End Choice
To:
Choice
    int
    letters
    'c'
    /*/
    int
End Choice


//each one of these choices has a prefix (which also happens to be a nested tuple)
From:
Choice
    Tuple
        Tuple
            int
            letters
            /*/
        End Tuple
        int
        Tuple
            /*/
            letters
            int
        End Tuple
    End Tuple
    Tuple
        Tuple
            int
            letters
            /*/
        End Tuple
        letters
        Tuple
            /*/
            letters
            int
        End Tuple
    End Tuple
    Tuple
        Tuple
            int
            letters
            /*/
        End Tuple
        'c'
        Tuple
            /*/
            letters
            int
        End Tuple
    End Tuple
End Choice
To:
Tuple
    int
    letters
    /*/
    Choice
        int
        letters
        'c'
    End Choice
    /*/
    letters
    int
End Tuple

//adjacent constants

From:
Tuple
    'c'
    'c'
    'c'
End Tuple
To:
'ccc'

//more adjacent constants

From:
Tuple
    letters
    'c'
    'c'
    letters
    'c'
    'c'
    letters
    'c'
    'c'
    'c'
End Tuple
To:
Tuple
    letters
    'cc'
    letters
    'cc'
    letters
    'ccc'
End Tuple


//lab1 was a letters value that was unique
From:
letters (lab1)
To:
'a_unique_value'



From:

//lab2 was never found when parsing and is removed

From:
Choice
    int
    letters (lab2)
    'c'
    /*/
End Choice
To:
Choice
    int
    'c'
    /*/
End Choice

//the following shows the sum mapping transition
//These dependencies exist:
// s3 -> s1
// s3 -> s2
// s2 -> s1

//a valid row for this test would be one of the following lines
1 10 101
1 11 102
1 11 103
2 12 104
2 13 105
2 13 106

//note that after the sums are remapped, the adjacent constants are 
//combined to the much simpler form
From:
Tuple
    int
    Choice (s1)
        '1' (r1)
        '2' (r2)
    End Choice
    Choice (s2)
        '10' (r10)
        '11' (r11)
        '12' (r12)
        '13' (r13)
    End Choice
    Choice (s3)
        '101' (r101)
        '102' (r102)
        '103' (r103)
        '104' (r104)
        '105' (r105)
        '106' (r106)
    End Choice
    int
End Tuple
To:
Tuple
    int
    Choice
        '110101'
        '111102'
        '111103'
        '212104'
        '213105'
        '213106'
    End Choice
    int
End Tuple
