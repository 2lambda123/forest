Although PADS descriptions can make managing ad hoc data much easier,
there remains the problem of writing the description in the first
place.  Writing such descriptions can be tedious and time consuming.
It often requires iteratively writing a description of as much of the
data as the analyst understands, and then generating and running
analysis tools to find the unknown parts of the data.  After
understanding those parts, the analyst refines the description and
repeats, until all the data either conforms to the description or 
constitutes an actual error.  While the web server log may seem simple
enough to write a description or even a parser by hand, the system log
is much more complex because it has much more variation.  Having a
tool to help produce such a description would be enormously helpful.

Several observations suggest that we might be able to infer
descriptions automatically.   
First, ad hoc data for which we want to infer descriptions is
voluminous and tends to be structured as a sequence of records.
Consequently, we can view each record as an independent instance of
the desired description.  We can then leverage the similarities across
records to derive the structure of the description.  The large
volume minimizes the influence of errors in the data, which
we assume to be relatively rare.

Second, ad hoc data tends to contain distinctive atomic data such as
dates, IP addresses, file system path names, urls, email addresses, MAC
addresses, etc.  We can leverage the distinctiveness of these data
formats to identify them with high confidence in the data source. If a
given portion of each record parses correctly as an IP address, we can
assume with high confidence that that portion of teh data is actually
an IP address.

Third, ad hoc data formats typically contain *punctuation*, tokens in
the data that serve to delimit the *payload*.  For example, in web
server logs, white space divides the data into columns.  Furthermore,
brackets delimit the date field while quotation marks frame the
request.  In the system log example, white space and colons delimit
fields while various key words serve to demark information of interest
to particular applications.  Given a large enough data source, the
frequency of punctuation dominates the frequency of payload.  Hence we
can automatically discover the punctuation. 

Given the information about distinctive base types and punctuation, we
can follow an approach similar to the one developed for extracting a
schema from XML data generated by a template and data from a database
\cite{Arasu-GarciaMolena}. 





