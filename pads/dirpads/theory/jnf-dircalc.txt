s+------------+
| DATA MODEL |
+------------+

n ::= ...            -- STRING

p,q ::=              -- PATH
  | .                -- current
  | ..               -- ancestor
  | b                -- PADS-described name
  | p/p              -- concatenation
  | /p               -- rooted path
  | x::p             -- path binder

-- question: do we also want XPath-like operators?
  | //b              -- descendant

r,s ::=              -- NORMAL PATH
  | /n1/ ... /nk

F ::= -- FILESYSTEM
  | { r |-> m * T }

-- note: formalize what it means for F to be well-formed (the
   prefix-closed conditions from the old dircalc file).

m ::= -- METADATA
  | { owner : int;
      group : int;
      permissions : string; 
      created : int; 
      accessed : int;
      modified : int; }       

T ::= -- FILESYSTEM CONTENTS
  | file(n)
  | dir({n1,...,nk})
  | link(p)

+--------+
| SYNTAX |
+--------+

s ::=                -- SPECIFICATION
    | k              -- constant (e.g., dir, file, link, csv, xml, ascii, etc.)
    | Adhoc(b,n)     -- b-described data
    | ^p             -- symbolic link
    | Pred(e)        -- predicate
    | Computed(e)    -- computed value
    | Transform(e,s) -- transformation
    | True           -- anything 
    | e : s          -- path 
    | <x:s, s>       -- dependent pair
    | s|s            -- union
    | U (x in e) . s -- structural recursion
    | ~s             -- negation 

e ::= ...

+-----------+
| SEMANTICS |
+-----------+

We assume a collection of type-indexed functions

  eval_tau : env * F * norm path * exp -> env * tau

The judgment E; F; r |= s ==> v * d relates an environment E, file
system F, normal path r, specification s, value v, and parse
descriptor d.  The judgment is a total function from tuples (E,F,r,s)
to non-empty sets of pairs (v,d). We maintain the invariant that r in
dom(F).

We also assume a standard typing judgment for expressions E |- e : tau

=========
= QUERY =
=========

This judgement provides a facility for users to parse using
specifications and arbitrary path expresions.

eval_norm_path_set({},F,/,e) = E',S
r in S
E';F;r |= s ==> (v,d)
----------------------------------
F;e |= s ==> (v,d)

============
= CONSTANT =
============

----------------------------
E;F;r |= k ==> check_k(F(r))

Here are several instances of check_k:

  * check_any(_,_) = ((),any_pd(true))
    - RP: unit
    - PD: any_pd of bool

  * check_dir(m,dir(cs)) = ((m,cs),dir_pd(true)) 
  * check_dir(_) = ({},dir_pd(false)) 
    - RP: metadata * string set  
    - PD: dir_pd of bool  

  * check_file(m,file(n)) = ((m,n),file_pd(true))
  * check_file(_) = ((default_metadata,""),file_pd(false))
    - RP: metadata * string 
    - PD: file_pd of bool 

  * check_link(m,link(p)) = ((m,p),link_pd (true)) 
  * check_link(_) = ((default_metadata, /.),link_pd (false))
    - RP: metadata * path 
    - PD: link_pd of bool

  * check_csv(m,file(n)) when valid_csv(n) = ((m,v),csv_pd(true)) 
  * check_csv(_) = (default_metadata,empty_csv),csv_pd(false)) 
    - RP: metadata * csv value 
    - PD: csv_pd of bool

=========
= ADHOC =
=========
RP: metadata * b_{RP} 
PD: adhoc_pd of bool * b_{PD}

where pads_ok is a library function that checks if the errcode of the
the PADS parse descriptor is success.

F(r) = m,file(n')
b(E,n') = (E',v,d)
-----------------------------------
E;F;r |= Adhoc(b,n) ==> ((m,v),adhoc_pd(true && pads_ok_d,d))

if F(r) = m,dir(_) or m,link(_)
b(E,n) = (E',v'd)
----------------------------------------------------------------
E;F;r |= Adhoc(b,n) ==> ((default_metadata,v),adhoc_pd(false,d))

========
= LINK =
========
RP: metadata * norm_path 
PD: link_pd of bool

F(r) = m,link(r'') 
b = ( eval_norm_path(E,F,r,e) = Some (E',r') /\ r' = r'' )
--------------------------------------------------------
E;F;r |= ^e ==> ((m,r''),link_pd(b))

F(r) = m,file(_) or m,dir(_)
----------------------------------------------------
E;F;r |= ^e ==> ((default_metadata,/),link_pd(false))

=============
= PREDICATE = 
=============
RP: unit
PD: pred_pd of bool

b = eval_bool(E,F,r,e) 
------------------------------------
E;F;r |= Pred(e) ==> ((),pred_pd(b))

===========
= COMPUTE =
===========
RP: tau
PD: compute_pd of bool

E |- e : tau
eval_tau(E,F,r,e) = (E',t)
--------------------------------------------
E;F;r |= Compute(e) ==> (t,compute_pd(true))

=============
= TRANSFORM =
=============
RP: t_{RP}
PD: t_{PD}

where f in (s_{RP} * s{PD}) -> (t_{RP} * t_{PD})
-- question: how to check f's (precise) type?

eval_fun(E,F,r,e) = (E',f)
E;F;r |= s ==> (v,d)
--------------------------------------
E;F;r |= Transform[t_{RP},t_{PD}](e,s) ==> f (v,d)

-- notation: e @[RP,PD] s ~~> Transform[RP,PD](e,s)

========
= PATH = 
========
RP: norm_path * s_{RP}
PD: path_pd of bool * s_{PD}

eval_norm_path(E,F,r,e) = (E',r')
r' in dom(F)
E';F;r' |= s ==> (v,d)
---------------------------------------------
E;F;r |= e : s ==> ((r',v),path_pd(pi1 d, d))

-- FINISH: what to do in this case?

eval_norm_path(E,F,r,e) = (E',r')
r' not in dom(F)
???
-----------------------------
E;F;r |= e : s ==> ???

========
= PAIR = 
========
RP: s1_{RP} * s2_{RP}
PD: pair_pd of bool * s1_{PD} * s2_{PD}

E;F;r |= s1 ==> (v1,d1)
E[x:=v1,x_d:=d1];F;r |= s2 ==> (v2,d2)
------------------------------------------------------------------
E;F;r |= <x:s1, s2> ==> ((v1,v2),pair_pd(pi1 d1 && pi2 d2, d1,d2))

=========
= UNION = 
=========
RP: s1_{RP} + s2_{RP} 
PD: union_pd of bool * s1_{PD} + s2_{PD}

E;F;r |= s1 ==> (v1,d1) 
s1_{ok} d1 = true
--------------------------------------------
E;F;r |= s1|s2 ==> (inl v1,union_pd(pi1 d1, inl d1))

E;F;r |= s1 ==> (v1,d1)
s1_ok d1 = false
E;F;r |= s2 ==> (v2,d2)
-------------------------------------------
E;F;r |= s1|s2 ==> (inr v2,union_pd(pi2 d2, inr d2))

=================
= SINGLETON SET = 
=================
RP: s_{RP} set 
PD: singleton_pd of bool * s_{PD}

E;F;r |= s ==> (v,d)
----------------------------------------
E;F;r |= { s } ==> ({v},singleton_pd(pi1 d,d))

========================
= STRUCTURAL RECURSION =
========================
RP: s_{RP} set
PD: srec_pd of bool * s_{PD} set

E |- e : tau set
S = U_{E',t' in eval_tau_set(E,F,r,e)} { (v,d) } where E'[x:=t'];F;r |= s ==> (v,d)
---------------------------------------------------------------------------------
E;F;r |= U (x in e) . s ==> (U (fst S), srec_pd (&& (pi1 (snd S)), snd S))

============
= NEGATION =
============
RP: s_{RP}
PD: neg_pd of bool * s_{PD}

E;F;r |= s ==> (v,d)
--------------------------------------------
E;F;r |= ~s ==> (v,neg_pd(not(pi1 d,d)))

=================
= DERIVED FORMS = 
=================

The RP and PDs for derived forms stated here are for illustrative
purposes only. They are computed from the primitives.

  * where clauses

    x:s where e =def= 
      (fun ((v1,_),pair_pd(d1,d2)) -> (v1,where_pd(d2 && pi1 d1,d1)))       
      @[s_{RP},where_pd of bool * s_{PD}]
      <x:s,Pred e>

  * Empty tau set
    RP: tau set 
    PD: compute_pd of bool
    { }_tau =def= Compute({}_tau)

  * Full union 
    where s1_{RP} = s2_{RP}
    RP: s1_{RP} 
    PD: union_pd of (s1_{PD} + s2_{PD})
    s1 || s2 =def= 
      (fun (v,d) -> match v with 
        | inl v' -> (v',d)
        | inr v' -> (v',d))
      @[s1_{RP}, union_pd of (s1_{PD} + s2_{PD})]
      (s1 | s2)

  * Comprehension
    RP: s_{RP} set
    PD: srec_pd of (singleton_pd of s_{PD}) set
    { s | x in e } =def= U (x in e) . { s }

  * Path set Kleene star
    RP: s_{RP} set
    PD: srec_pd of bool * 
          (union_pd of bool *
             (singleton_pd of bool* path_pd of ((bool* s_{PD}) + compute_pd of bool)))
    (e :* s) =def= U (x in e) . ({ x : s } || {})

================================================================================
MINEFIELD : The examples below this may be out of sync with the above calculus
================================================================================

===============================
= Example #1: empty directory =
===============================

F = 
  / => dir{foo,bar}
  /foo => dir{baz}
  /bar => dir{}
  /foo/baz => file("hello world!")

empty =def= < dir, ~({ True | x in "*" })> 

{};F;/bar |= empty ==> (< {}, dir{}>, 
                        pair_pd(dir_pd(true), neg_pd(true,d))
{};F;/foo |= empty ==> (<{baz},file("hello world!")>, 
                        pair_pd(dir_pd(true), neg_pd(false,d)))

===================================
= Example #2: exact specification =
===================================

F = 
  / => dir{foo,bar}
  /foo => dir{baz}
  /bar => dir{}
  /foo/baz => file("hello world!")

s_F = 
 "/" : 
    < dir,
      "foo" : < dir, 
                "baz" : file >,
      "bar" : < dir, 
                empty > > 

{};F;/ |= s_F ==> 
  (< {foo,bar}, 
     < ("foo", < {baz}, ("baz" : "hello world!")> ),
       ("bar", < {}, dir {} >) > >, 
   d)
  and ok d = true

===================================
= Example #3: singleton directory =
===================================

F = 
  / => dir{foo,bar}
  /foo => file("hello world!")
  /bar => dir{baz}
  /bar/baz => file("goodbye world!")

singleton1 = < dir, x:("*" : True)*, Pred(|x| = 1)>

or shorter...

singleton2 = < x:("*" : True)*, Pred(|x| = 1)>
singleton3 = < x:dir, Pred(|x| = 1)>

or even shorter...

singleton4 = x:("*" : true)* where |x| = 1
singleton5 = x:dir where |x| = 1

Let's try the simplest one first...

{};F;/ |= singleton5 ==> ({foo,bar},where_fd(dir_pd(true),pred_pd(false)))
{};F;/bar |= singleton5 ==> ({baz},where_fd(dir_pd(true),pred_pd(true)))

{};F;/ |= singleton4 ==> ( { ("foo", file("hello world!")), ("bar", dir{baz}) }, 
                             where_pd(...,pred_pd(false))
{};F;/bar |= singleton4 ==> ( { ("baz": file("goodbye world!")) }, 
                              where_pd(...,pred_pd(true))

========================================
= Directories with specified contents  =
========================================

Directory only containing files with extension ".exe".

s1 = < dir, x:("*.exe" : file)*, y:("*" : file)*, Pred(|x| = |y|) > 

Observe that s1 is not so nice when the directory contains both .exe
and non-.exe files because the y part of the representation contains
all files not just the non-.exe files. Here is a refinement of s1 that
excludes those files:

s2 = < dir, x:("*.exe" : file)*, y:((/regexp_complement "*.exe"/ : file)* ), Pred(|y| = 0)>

Can we remove the predicate negate the y part?

s3 = < dir, x:("*.exe" : file)*, y:~((/regexp_complement "*.exe"/ : file)+) >

Directory only containing items that match a spec s_arg 

s4 = < dir, x:("*" : s_arg)*, y:("*" : True)*, Pred(|x| = |y|) > 

Directory containing two .exe files and at least one .txt file.

s5 = < dir, x:("*.exe" : file)*, y:("*.txt" : file)*, Pred(|x| = 2 /\ |y| >= 1)>

===========================
= Multiple path wildcards =
===========================

Any number of directories, each with at least one text file:

s1 = ( "*" : !( "*.txt" : file ) )*

All of the text files in any number of directories. The rep flattens
the nesting structure:

s2 = U( x in "*/*.txt" ) . { x : file } || {}

     { x : file | x in "*/*.txt"} ~~> U( x in "*/*.txt" ) . { x : file } 

s2 = ("*/*.txt" : True)*

Here's a version, where we do the iteration explicitly (i.e., not in
the expression language for paths):

( "*/*.dir" / ( "*.txt" : file ))*

s1 = U (d in dirs("*")) . U (f in d/"*.txt") . { f : file } || {}
s2' = U (d in dirs("*")) . U (f in d/"*.txt") . { f : file } || {}

/d = dir{a.txt,b.txt}
/d/a.txt = file("hello")
/d/b.txt = file("world")


=======================
= More (Simple) Sugar = 
=======================

{ s | x in e1, y in e2 } =def= U (x in e1) . U (y in e2) . { s }

< s1,s2 > =def= < _:s1, _:s2 >

(e : s)+ =def=
  (fun ((vh,vt),pair_pd(d,D)) -> ({vh} U vt,srec_pd({d} U D))) 
  @ 
  < (e : s),(e : s)* > 

EmptyDir =def= ~(!("*" : True))

False =def= ~True

 -- s? = s | True

========
= Todo =
========
 - recursion operator
 - metadata

================================================================================
BONEYARD : Everything below this is deprecated
================================================================================

==========
= CHOOSE = 
==========

--JNF: removed this because we don't have a compelling use case for it

RP : e_{RP} option where s_{RP} = e_{RP} set
PD : choose_pd of (bool * s_{PD})
ok: (fun (choose_pd(b,d)) -> b && s_{ok} d) 

E;F;r |= s ==> ({v1,...,vk},d)
i in 1..k
---------------------------------------
E;F;r |= Choose(s) ==> (Some vi,choose_pd(true,d))

E;F;r |= s ==> ({},d)
---------------------------------------
E;F;r |= Choose(s) ==> (None,choose_pd(false,d))

  * Some path
    RP: norm_path * s_{RP}
    PD: choose_pd of 
          (srec_pd of 
            (union_pd of 
               (singleton_pd of (path_pd of s_{PD}) + compute_pd)))

    !(e : s) =def= Choose ( (e : s)* )


========
= TRUE =
========
JNF: removed this because it is redundant (see k_any)

RP: file system contents
PD: true_pd of bool

--------------------------------------
E;F;r |= True ==> (F(r),true_pd(true))
