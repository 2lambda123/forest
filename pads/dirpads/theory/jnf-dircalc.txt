+------------+
| DATA MODEL |
+------------+

n ::= ...          -- STRINGS

p,q ::=              -- PATH
  | .                -- current
  | ..               -- ancestor
  | b                -- PADS-described name
  | p/p              -- concatenation
  | /p               -- rooted path

do we also want other XPath-like stuff?
  | //b              -- descendant

r,s ::=              -- NORMAL PATH
  | /n1/ ... /nk

F ::= -- FILESYSTEM
  | { r |-> T }

-- note: need to write down what it means for F to be
   well-formed. E.g., the prefix-closed conditions from the old
   dircalc file.

m ::= -- METADATA
  | ...

T ::= -- FILESYSTEM CONTENTS
  | file(n)
  | dir({n1,...,nk})
  | link(p)

+--------+
| SYNTAX |
+--------+

s ::=                -- SPECIFICATION
    | k              -- constant file specs (e.g., dir, file, link, csv, xml, ascii, etc.)
    | Adhoc(b)       -- b-described file spec 
    | ^p             -- symbolic link
    | Pred(e)        -- predicate
    | Computed(e)    -- computed values
    | Transform(e,s) -- transformations
    | True           -- any directory structure
    | e : s          -- file/directory named n with spec s
    | <x:s, s>       -- dependent pair
    | s|s            -- union
    | s*             -- iteration
    | { s | x in e } -- comprehension
    | ~s             -- negation 

e ::= 
    | x
    | U (x in e) . e
    | { e }
    | { } 
    | e | e 
    | (e,e)
    | fst e 
    | snd e 
    | p 
    | ...

+-----------+
| SEMANTICS |
+-----------+

The function

  eval_paths : env * filesystem * normal path * exp -> (env * normal path) set 
  eval_tau : env * exp -> env * tau

...

The judgement 

  E; F; r |= s ==> v * d

relates an environment E, a file system F, a normal path r, a
specification s, a value v, and a parse descriptor d. (The judgement is
a total function from tuples (E,F,r,s) to non-empty sets of pairs
(v,d).)

We maintain the invariant that r in dom(F).

=========
= QUERY =
=========

r in eval_and_normalize({},F,"/",e)
{};F;r |= s ==> (v,d)
----------------------------------
F |= e @ s ==> (v,d)

-- note: this judgement provides a facility for users to parse using
   specifications and arbitrary path expresions. (The
   eval_and_normalize function checks that r is in dom(F).)

-- fix: change '@' to something else to avoid clash with shorthand for
   Transform(e,s).

============
= CONSTANT =
============

----------------------------
E;F;r |= k ==> check_k(F(r))

  -- here are several instances of check_k:
     * check_any(T) = (T,true)

     * check_dir(T) = (cs,true) if T = dir(cs) 
     * check_dir(T) = (T,false) if T <> dir(cs) 

-- note: to simplify the type, we could make the rep {} if T is not a directory

     * check_file(T) = (n,true) if T = file(n) 
     * check_file(T) = (T,false) if T <> file(n)

     * check_link(T) = (n,true) if T = link(n) 
     * check_link(T) = (T,false) if T <> link(n)

     * check_csv(T) = ((tbl,true),true) if T = file(n) and n is a valid CSV file encoding tbl
     * check_csv(T) = ((n,false),true) if T = file(n) and n is not a valid CSV file
     * check_csv(T) = (T,false) if T <> file(n) 

     -- query: why do we put a bool in the rep? This arguably seems more natural
     * check_csv(T) = (tbl,true) if T = file(n) and n is a valid CSV file encoding tbl
     * check_csv(T) = (T,false) if T <> file(n) or T = file(n) and n not a valid CSV file

=========
= ADHOC =
=========

-- QUESTION: what to do with E'??

F(r) = file(n)    b(E,n) = (E',v,d)
-----------------------------------
E;F;r |= Adhoc(b) ==> ((v,d),true)

if F(r) <> file(n)
----------------------------------
E;F;r |= Adhoc(b) ==> (F(r),false)

-- query: same issue -- why not merge the d into the parse descriptor?

========
= LINK =
========

F(r) = link(r'') 
eval_norm_path(E,e) = (E',r')
--------------------------------------
E;F;r |= ^e ==> ((r',r' = r''),true)

F(r) <> link(r')
----------------------------
E;F;r |= ^e ==> (F(r),false)

=============
= PREDICATE = 
=============

eval_bool(E,e) = (E',b)
----------------------------------------
E;F;r |= Pred(e) ==> ((),b)

===========
= COMPUTE =
===========

E |- e : tau
eval_tau(E,e) = (t,E')
--------------------------------------------
E;F;r |= Compute(e) ==> (t,true)

=============
= TRANSFORM =
=============

eval_fun(E,e) = (E',f)
E;F;r |= s ==> (v,d)
--------------------------------------
E;F;r |= Transform(e,s) ==> f (v,d)

  -- note: in practice, f will produce a pair (v',d') where d' is
     consistent (in some way) with the structure of v'. Kathleen
     thinks we can express this condition (at the type level) using
     functional dependencies in Haskell?

  -- notation: e @ s ~~> Transform(e,s)

========
= TRUE =
========

r in dom(F)
-----------------------------
E;F;r |= True ==> (F(r),true)

========
= PATH = 
========

eval_norm_path(E,e) = (E',r')
E';F;r' |= s ==> (v,d)
--------------------------------------
E;F;r |= e : s ==> ((r',v),d)

========
= PAIR = 
========

E;F;r |= s1 ==> (v1,d1)
E[x:=v1,x_d:=d1];F;r |= s2 ==> (v2,d2)
----------------------------------------
E;F;r |= <x:s1, s2> ==> ((v1,v2),d1&&d2)

=========
= UNION = 
=========

E;F;r |= s1 ==> (v1,true) 
----------------------------
E;F;r |= s1|s2 ==> (inl v1,true)

E;F;r |= s1 ==> (v1,false)
E;F;r |= s2 ==> (v2,true)
----------------------------
E;F;r |= s1|s2 ==> (inr v2,true)

E;F;r |= s1 ==> (v1,false)
E;F;r |= s2 ==> (v2,false)
----------------------------
E;F;r |= s1|s2 ==> (inn (v1,v2),false)

inl : in left
inl : in right
inn : in neither?

-- question: return (v1,v2) in the third case? add a function g to
   pick a best erroneous parse?

-- question: replace last two cases with this?

  E;F;r |= s1 ==> (v1,false)
  E;F;r |= s2 ==> (v2,d2)
  ----------------------------
  E;F;r |= s1|s2 ==> (inr v2,d2)

==============
= RAW UNION =
==============

-- note: s1 and s2 must have disjoint rep types? 

s1 || s2 =def= (fun (v,d) -> (match v with inl v' | inr v' -> v',d)) @ (s1 | s2)

=================
= SINGLETON SET = 
=================

E;F;r |= s ==> (v,d)
--------------------------
E;F;r |= { s } ==> ({v},d)

==========
= CHOOSE = 
==========

E;F;r |= s ==> ({v1,...,vk},d)
i in 1..k
--------------------------
E;F;r |= Choose(s) ==> (vi,d)

=============
= EMPTY SET = 
=============

{ } =def= Compute({})

=================
= COMPREHENSION =
=================

E |- e : tau set
S = { (v,d) | (E',t') in eval_tau_set(E,e) /\ E'[x:=t'];F;r |= s ==> (v,d) }
----------------------------------------------------------------------------
E;F;r |= U (x in e) . s ==> (U (fst S), && (snd S))

========
= STAR =
========

s* =def= U (_ in ".") . { s } || {}

==========================
= PACKAGED COMPREHENSION =
==========================

{ s | x in e } =def= U (x in e) . { s }

==================
= PACKAGED PATHS =
==================

(e : s)* =def= U (x in e) . { x : s } || {}

============
= NEGATION =
============

if E;F;r |= s ==> (v,true)
----------------------------
E;F;r |= ~s ==> (v,false)                        

E;F;r |= s ==> (v,false)
------------------------
E;F;r |= ~s ==> (v,true)       

-- note: we will need to rethink this when we add more interesting
   parse descriptors... in particular, the second case.

~(~s) |- s : \x.x ?

+----------+
| Examples |
+----------+

===================
= Empty directory =
===================

F = 
  / => dir{foo,bar}
  /foo => dir{baz}
  /bar => dir{}
  /foo/baz => file("hello world!")

empty =def= < dir, ~("*" : True) > 

{};F;/bar |= empty ==> (< {}, dir{}>, true)
{};F;/foo |= empty ==> (<{baz},file("hello world!")>,false)

====================================
= Exact description of a directory =
====================================

F = 
  / => dir{foo,bar}
  /foo => dir{baz}
  /bar => dir{}
  /foo/baz => file("hello world!")

this_F = 
 "/" : 
    < dir,
      "foo" : < dir, 
                "baz" : file >,
      "bar" : < dir, 
                empty >
    > 

{};F;/ |= this_F ==> 
  (< {foo,bar}, 
     < ("foo", < {baz}, ("baz" : "hello world!")> ),
       ("bar", < {}, dir {} >) > >, 
   true)

=======================
= Singleton Directory =
=======================

F = 
  / => dir{foo,bar}
  /foo => file("hello world!")
  /bar => dir{baz}
  /bar/baz => file("goodbye world!")

singleton1 = < dir, x:("*" : True)*, Pred(|x| = 1)>

or shorter...

singleton2 = < x:("*" : True)*, Pred(|x| = 1)>
singleton3 = < x:dir, Pred(|x| = 1)>

or even shorter...

singleton4 = x:("*" : true)* where |x| = 1
singleton5 = x:dir where |x| = 1

Let's try the simplest (last) one first...

{};F;/ |= singleton5 ==> ({foo,bar}, false)
{};F;/bar |= singleton5 ==> ({baz},true)

{};F;/ |= singleton4 ==> ( { ("foo", file("hello world!")), 
                             ("bar", dir{baz}) }, true)
{};F;/bar |= singleton4 ==> ( { ("baz": file("goodbye world!")) }, true )

========================================
= Directories with specified contents  =
========================================

Directory only containing files with extension ".exe". 

s1 = < dir, x:("*.exe" : file)*, y:("*" : file)*, Pred(|x| = |y|) > 

Observation: s1 is not so nice when the directory contains both .exe
and non-.exe files because the y part of the representation will
contain all files, not just the non-.exe files. We can refine s1 to s2
by excluding those files:

s2 = < dir, x:("*.exe" : file)*, y:((/regexp_complement "*.exe"/ : file)* ), Pred(|y| = 0)>

Now we wonder if we can remove the predicate and add a negation for the y part.

s3 = < dir, x:("*.exe" : file)*, y:~((/regexp_complement "*.exe"/ : file)+) >

Directory only containing items that match a spec s_arg 

s4 = < dir, x:("*" : s_arg)*, y:("*" : True)*, Pred(|x| = |y|) > 

Directory containing two .exe files and at least one .txt file.

s5 = < dir, x:("*.exe" : file)*, y:("*.txt" : file)*, Pred(|x| = 2 /\ |y| >= 1)>

+-----------------------+
| Other Syntactic Sugar |
+-----------------------+

x:s where p(x) ~~> (fun (v,d) -> (fst v,d)) @ < x:s, Pred(p) >

EmptyDir = ~("*" : True)

False = ~True

s? = s | True

(s?)*

< s1,s2 > = < _:s1, _:s2 >

s+ = (fun ((vh,vt),d) -> ({vh} U vt,d)) @ < s,s* > 

TODO
 - examples involving comprehension
 - recursion operator
 - metadata
 X Kleene star still seems slightly weird. Can we find primitives that
   lets us encode it?
