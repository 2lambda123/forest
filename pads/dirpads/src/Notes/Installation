Pads/Haskell currently needs HEAD version of Haskell.  Instructions on
installing the HEAD version are available from:

  http://hackage.haskell.org/trac/ghc/wiki/Building

The instructions don't mention this, but you'd be much better off
configuring your HEAD version to be installed in your user directory
hierarchy than in the default place (/usr/local). You have to install
the older main ghc before you can build the HEAD version, and installing
them in a place like /usr/local increases the chances of interference 
between the two versions and their associated tools.

The #haskell IRC channel is very helpful for all sorts of newbie-Haskell
(and more advanced) questions.

The sources for PADS/Haskell are currently stored in the PADS
respository:

  cvs-graphviz.research.att.com:/cvsroot

in the directory:

  pads/dirpads/src

Let GHC_PATH be the path to the bin directory for the head version of ghc: 
GHC_PATH = /Users/kfisher/sw/ghc-head/bin

There are at least two methods for installing libraries for Haskell. The
standard and preferred tool is called Cabal; the other method is presented
because HEAD versions sometimes get out of sync with Cabal and it no longer
works for those versions.

Cabal can install libraries for Haskell and optionally also can generate
documentation.  To get Cabal to generate documentation, you need to change 
a configuration parameter. In the default .cabal/config file you should see 
an option called "documentation", that will be commented out, as well as 
set to False. Uncommenting that line and setting the value to True should 
build documentation the next time you install a package.

If you can't get Cabal to work with your ghc HEAD version, try this:

* make sure the HEAD version of ghc is first in your PATH
* download and decompress the library you want, 'mylibrary' for example
* cd mylibrary
* ghc --make Setup.hs -o Setup'
* ./Setup configure --user'
* ./Setup build'
* ./Setup install --user'

You can list the packages installed in your HEAD version with the command

	ghc-pkg list

I have the following libraries installed (and so everything
PADS/Haskell needs is in this list):
    cpphs-1.11
    haskell-src-exts-1.9.0
    haskell-src-meta-0.0.7
    mtl-1.1.0.2
    packedstring-0.1.0.1
    parsec-2.1.0.1
    parsec-3.1.0
    regex-base-0.93.1
    regex-compat-0.92
    regex-posix-0.94.1
    syb-0.1.0.3
    template-haskell-2.4.0.0

Some of these libraries will be installed as a side effect of
installing others.  To install a library <lib-name> from hackage for
the HEAD version: 

~/.cabal/bin/cabal install  <lib-name> -w $GHC_PATH/ghc --with-haddock=$GHC_PATH/haddock

The -w flag tells cabal for which version of ghc you want to install
the library.  The --with-haddock flag tells cabal which tool you want
to use to install documentation.  It's version has to match that of
the compiler.  If you only have the HEAD version of ghc in your path,
then you don't need either of these flags.   (Similarly, if you have
only one version of cabal in your path, you can just say "cabal"
instead of the full path I have given.  

If you give a <lib-name> like parsec-3.1.0, cabal installs the specified
version of the parsec library, whereas if you give a <lib-name> like
regex-compat, cabal uses the most recent version of the library.  

I would install the libraries above as follows:

~/.cabal/bin/cabal install syb  -w GHC_PATH/ghc --with-haddock=GHC_PATH/haddock
~/.cabal/bin/cabal install regex-compat  -w GHC_PATH/ghc --with-haddock=GHC_PATH/haddock
~/.cabal/bin/cabal install haskell-src-exts  -w GHC_PATH/ghc --with-haddock=GHC_PATH/haddock

Parsec 2.1 and 3.1 are incompatible, but both still live.  I'm not
100% sure which version of the library we're using, so for now, I'd
install them both (or try just intalling parsec.2.1.0.1 and see if you
end up with an error).
~/.cabal/bin/cabal install parsec-2.1.0.1  -w GHC_PATH/ghc --with-haddock=GHC_PATH/haddock
~/.cabal/bin/cabal install parsec-3.1.0  -w GHC_PATH/ghc --with-haddock=GHC_PATH/haddock

I think template-haskell is already installed when building the HEAD version,
but I seem to have installed it again using Cabal, which would look
like:
~/.cabal/bin/cabal install template-haskell  -w GHC_PATH/ghc --with-haddock=GHC_PATH/haddock
You can again skip this step and see if you get an error.

The library haskell-src-meta is the library that I have modified
locally.  Its sources are part of the PADS/Haskell repository.  To
install it, 

> cd pads/dirsrc/haskell-src-meta
> ~/.cabal/bin/cabal install  -w GHC_PATH/ghc --with-haddock=GHC_PATH/haddock

I believe installing these libraries will cause all the other necessary
libraries to be installed.

Then, you can try to load pads/haskell.  The following command invokes
the haskell shell with the flags we need:

>cd pads/dirpads/src
>GHC_PATH/ghci -package parsec -XQuasiQuotes -XTemplateHaskell -XDeriveDataTypeable -XScopedTypeVariables -XMultiParamTypeClasses -XFunctionalDependencies -XFlexibleInstances -XUndecidableInstances -XNamedFieldPuns -XRecordWildCards -XStandaloneDeriving

GHCi, version 6.13.20100309: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Loading package parsec-2.1.0.1 ... linking ... done.
Loading package bytestring-0.9.1.5 ... linking ... done.
Loading package mtl-1.1.0.2 ... linking ... done.
Loading package syb-0.1.0.3 ... linking ... done.
Loading package parsec-3.1.0 ... linking ... done.
Loading package ffi-1.0 ... linking ... done.

Then you can load the file Examples/First.hs which contains sample
PADS/Haskell user code:

Prelude>:load Examples/First.hs
Prelude> :load Examples/First.hs
[ 1 of 17] Compiling Text.Regex.ByteString ( Text/Regex/ByteString.hs, interpreted )
[ 2 of 17] Compiling Language.Pads.Syntax ( Language/Pads/Syntax.hs, interpreted )
[ 3 of 17] Compiling Data.Loc         ( Data/Loc.hs, interpreted )
[ 4 of 17] Compiling Text.PrettyPrint.Mainland ( Text/PrettyPrint/Mainland.hs, interpreted )
[ 5 of 17] Compiling Language.Pads.Source ( Language/Pads/Source.hs, interpreted )
[ 6 of 17] Compiling Language.Pads.Errors ( Language/Pads/Errors.hs, interpreted )
[ 7 of 17] Compiling Language.Pads.Padsc ( Language/Pads/Padsc.hs, interpreted )
[ 8 of 17] Compiling Language.Pads.Pretty ( Language/Pads/Pretty.hs, interpreted )
[ 9 of 17] Compiling Language.Haskell.TH.Instances.Lift ( Language/Haskell/TH/Instances/Lift.hs, interpreted )
[10 of 17] Compiling Language.Haskell.Meta.Syntax.Translate ( Language/Haskell/Meta/Syntax/Translate.hs, interpreted )
[11 of 17] Compiling Language.Haskell.Meta.Syntax.Vars ( Language/Haskell/Meta/Syntax/Vars.hs, interpreted )
[12 of 17] Compiling Language.Haskell.Meta.Syntax ( Language/Haskell/Meta/Syntax.hs, interpreted )
[13 of 17] Compiling Language.Haskell.Meta.Parse ( Language/Haskell/Meta/Parse.hs, interpreted )
[14 of 17] Compiling Language.Haskell.Meta ( Language/Haskell/Meta.hs, interpreted )
[15 of 17] Compiling Language.Pads.Parser ( Language/Pads/Parser.hs, interpreted )
[16 of 17] Compiling Language.Pads.Quote ( Language/Pads/Quote.hs, interpreted )
[17 of 17] Compiling Examples.First   ( Examples/First.hs, interpreted )
Loading package array-0.3.0.0 ... linking ... done.
Loading package containers-0.3.0.0 ... linking ... done.
Loading package filepath-1.1.0.4 ... linking ... done.
Loading package old-locale-1.0.0.2 ... linking ... done.
Loading package old-time-1.0.0.4 ... linking ... done.
Loading package unix-2.4.0.1 ... linking ... done.
Loading package directory-1.0.1.1 ... linking ... done.
Loading package process-1.0.1.2 ... linking ... done.
Loading package time-1.1.4 ... linking ... done.
Loading package random-1.0.0.2 ... linking ... done.
Loading package haskell98 ... linking ... done.
Loading package cpphs-1.11 ... linking ... done.
Loading package pretty-1.0.1.1 ... linking ... done.
Loading package haskell-src-exts-1.9.0 ... linking ... done.
Loading package regex-base-0.93.1 ... linking ... done.
Loading package regex-posix-0.94.1 ... linking ... done.
Loading package template-haskell ... linking ... done.
Ok, modules loaded: Language.Haskell.Meta, Language.Haskell.Meta.Parse, Language.Haskell.Meta.Syntax, Language.Haskell.Meta.Syntax.Vars, Language.Haskell.Meta.Syntax.Translate, Language.Haskell.TH.Instances.Lift, Examples.First, Language.Pads.Padsc, Language.Pads.Quote, Language.Pads.Source, Language.Pads.Pretty, Text.PrettyPrint.Mainland, Data.Loc, Language.Pads.Syntax, Language.Pads.Errors, Text.Regex.ByteString, Language.Pads.Parser.

Then you can start playing with the code in the file:

*Examples.First> intPair_result
Loading package regex-compat-0.92 ... linking ... done.
((IntPair (Pint 12,Pint 23),(Errors: 0,(Errors: 0,Errors: 0,Errors:0))),"")

The file Examples/First.hs shows the expected output.  As I was
filling this information in, the system was hanging when processing
the regular expressions.  I thought I had fixed that problem, but
apparently not.   I'll have to work on tracking that problem down, but
I don't have time right now.

The file
 pads/dirpads/src/Language/Pads/Padsc.hs
contains the operations that implement the PADs parsing.  You can look
there if you want to see what operations are available.  

Please let me know if you have any questions or run into any problems.



