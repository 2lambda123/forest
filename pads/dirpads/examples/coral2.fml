
ptype date = pstring_ME ("/[1-2][0-9][0-9][0-9]_[0-1][0-9]/")
ptype time = pstring_ME ("/[0-9][0-9]_[0-9][0-9]/")
ptype timeformat = date * '-' * time

ptype coralweb_ty = ...  (* pads description *)
ptype probe_ty = ...  (* pads description *)

pfile log ('a,l:string,t:timeformat) = 'a with meta{loc=l; time=t}

(* change default such that ":" means exactly 1 occurence *)
(* change default such that ":*" means any number of occurences including 0 *)
(* need to translate unix file names/paths into valid o'caml record labels somehow *)
pdirectory files (l:string, t:timeformat)=
 {
  "corald.log.head"      : log(corald_ty,l,t)  | timestamp >= 700 && owner = "dpw";
  "coraldnssrv.log.head" : log(coraldns_ty,l,t); 
  "coralwebsrv.log.head" : log(coralweb_ty,l,t);
  "probed.log.head"      : log(probe_ty,l,t);
 }

(* syntax:     id[pads-path] : type
   means the internal record label is "id", and "pads-path" is used to parse the filename and get out certain
   metadata
*)

ptype coral_dir = 
directory
 {
   hosts[host:hostname/time:timeformat] :* files(host, time);
   title : pcompute "coral root";
   owner : pcompute "mike freedman";
 }



(* 


--------------------------------

Concrete Syntax:

top level declarations
tld ::=
  ptype id (id:hostty ... id:hostty) = padsty
| pdir id (id:hostty ... id:hostty) = dt

directory types
dt ::= directory {df; ... df;}

directory fields
df ::= 
  pathname arity filetype || constraints

pathname ::=
  concrete-file-path-name
| id[pads-pathname]             (id used as internal o'caml record label)

pads-pathname ::=
  pads-ty                       (pads ty describes a file name; eg, a date or time)
| x : pads-pathname             (identifier bound to path's meta-data)
| pads-ty / pads-pathname       (structured path; rep is a tuple)

arity ::=  
  :          (exactly 1 file specified) 
| :*         (0 or more files specified)

*)


