{- Description of configuration file for learning demo web site -}
ptype config_entry_t = precord ("\"" * pstring("\"") * "\";")    -- Helper type

ptype config_f = psource {
   header :: pstring_se(pre "$"),
   "$host_name   =",  host_name   :: config_entry_t,  -- Name of machine hosting web site
   "$static_path =",  static_path :: config_entry_t,  -- URL prefix for static content
   "$cgi_path    =",  cgi_path    :: config_entry_t,  -- URL prefix for cgi content
   "$script_path =",  script_path :: config_entry_t,  -- Path to directory of scripts in live web site
   "$tmp_root    =",  tmp_root    :: config_entry_t,  -- Path to directory for demo user data
   "$pads_home   =",  pads_home   :: config_entry_t,  -- Path to directory containing pads system
   "$learn_home  =",  learn_home  :: config_entry_t,  -- Path to directory containing learning system
   "$sml_home    =",  sml_home    :: config_entry_t,  -- Path to directory containing SML executable
   "$insrall_src =",  install_src :: config_entry_t,  -- Path to directory containing learning demo website source
   "$static_dst  =",  static_dst  :: config_entry_t,  -- Path to directory for static content in live web site
   "$cgi_dst     =",  cgi_dst     :: config_entry_t,  -- Path to directory for cgi content in live web site site
   trailer :: pstring(peor),
}

{- Directory of image files -}
ptype imgs_d = pdirectory {
    logo is "pads_small.jpg" :: p_jpg <| permission == "rw-rw-r--" |>;
  }

{- Directory of static content -}
ptype static_d = pdirectory {
    style_sheet is "pads.css"           :: p_css  <| permission == "rw-rw-r--" |>;
    intro_redir is "learning-demo.html" :: p_html <| permission == "rw-rw-r--" |>;
    title_frame is "atitle.html"        :: p_html <| permission == "rw-rw-r--" |>;
    logo_frame  is "top-left.html"      :: p_html <| permission == "rw-rw-r--" |>;
    top_frame   is "banner.html"        :: p_html <| permission == "rw-rw-r--" |>;
    empty_frame is "nothing.html"       :: p_html <| permission == "rw-rw-r--" |>;
    images      is "images"             :: imgs_d <| permission == "rwxrwxr-x" |>;
  }

{- Directory of dynamic content -}
ptype cgi_d = pdirectory {
    config1       is "PLConfig.pm"             :: config_f <| permission == "rwxrwxr-x" |>;
    config2       is "PLConfig.pm"             :: p_cgi    <| permission == "rwxrwxr-x" |>;
    perl_utils    is "PLUtilities.pm"          :: p_cgi    <| permission == "rwxrwxr-x" |>;
    intro         is "learning-demo.cgi"       :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Main frame for learning demo
    intro_nav     is "navbar-orig.cgi"         :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Navigation bar before we have learned a description
    select_data   is "pads.cgi"                :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Select data source to learn format
    result_nav    is "navbar.cgi"              :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Navigation bar once there is a learned description
    format_chosen is "data-results.cgi"        :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Respond to selected data source
    gen_desc      is "build-description.cgi"   :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Generate description for stock data format
    get_user_data is "build-roll-your-own.cgi" :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Ask user to enter data to be learned
    gen_desc_usr  is "genData.cgi"             :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Generate description for user's data format
    build_lib     is "build-library.cgi"       :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Compile generated description to PADS library
    build_accum   is "build-accum.cgi"         :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Generate accumulator program & display results
    build_xml     is "build-xml.cgi"           :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Generate XML conversion program & display results
    build_fmt     is "build-fmt.cgi"           :: p_cgi    <| permission == "rwxrwxr-x" |>;   -- Generate formatting program & display results
  }


{- Directory of shell scripts invoked by CGI to run learning system -}
ptype scripts_d = pdirectory {
    "rlearn"             :: p_bash   <| permission == "rwxrwxr-x" |>;    -- Shell script for running PADS comiler on stock format
    "rlearn-own"         :: p_bash   <| permission == "rwxrwxr-x" |>;    -- Shell script for running PADS compiler on user format
    "r-accum"            :: p_bash   <| permission == "rwxrwxr-x" |>;    -- Shell script to generate and run accumulator
    "r-xml"              :: p_bash   <| permission == "rwxrwxr-x" |>;    -- Shell script to generate and run XML converter
    "r-fmt"              :: p_bash   <| permission == "rwxrwxr-x" |>;    -- Shell script to generate and run formating program
  }

{- Format for file listing data sources for web site -}
ptype sourceNames_f = psource (pstringln plist)

{- Information related to a single user's use of the web site -}

{- Each visitor gets assigned a userId that is passed as a ? parameter in URL.
   Security considerations preclude using user-modifiable values as part of file paths.
   Thus, we map each userId to a corresponding dirId.
   The dirId names the directory containing the associated user's data. 
   A userEntry_t contains a single such mapping.
   A file with type userEntries_t describes a collection of such mappings.
-}
ptype userEntry_t = precord {
   "id.",   userId :: pint,               ",",
   "id.",   dirId  :: pint * "." * pint
} <| userId = fst dirId |> 

ptype userEntries_f = psource (userEntry_t plist);

{- Log of requests.  Used to prevent denial of service attacks. -}
ptype logEntry_t = precord {
  userId :: pint,         ",",
  ip     :: pip,          ",",
  script :: pstring(" "), " ",
  userDir:: pstring(" "), " ",
  pads   :: pstring(" "), " ",
  sml    :: pstring_se(" "|peor), 
  msg    :: pstring(peor) option
};

ptype logFile_f = psource (logEntry_t plist);

{- Directory containing administrative files used by demo web site -}
ptype info_d = pdirectory {
     sources is "sourceNames" :: sourceNames_f  <| permission == "rw-rw-r--" |>;   -- List of source data files whose formats can be learned
     users   is "usersFile"   :: userEntries_f  <| permission == "rw-rw-r--" |>;   -- Mapping from userIDs to associated directory names
     log     is "logFile"     :: logFile_f      <| permission == "rw-rw-r--" |>;   -- Log of server actions.
};                          

{- Helper function to map a list of userIds, to the associated list of directory names -}
userDirs(f::userEntries_t) = List.map dirId f

{- Type of stock data file -}
ptype dataFile_f = p_txt <| permission == "rw-rw-r--" |>

{- Type of directory containing stock data files named by sourceNames -}
ptype dataSource_d(sourceNames :: sourceNames_t) = pdirectory {
      dataSources is [ s :: dataFile_f | s <- sourceNames];
  }

{- Type of a link with permission rwxrwxr-x to location p with type dataFile_t -}
ptype dataLink_f p  = (dataFile_f @ p) <| permission == "rwxrwxr-x" |>

{- Directory of optional links to source data files -}
ptype data_d(sourceNames :: sourceNames_f, d :: dataSource_d(sourcesNames)) = pdirectory {
     data is [s :: (dataLink_f (loc d/s)) option |  s <- sourceNames]
};

{- Directory that stores the generated machine-dependent output for data source named source -}
ptype machineDep_d source = pdirectory {
   pads_c    is source ++ ".c"     :: p_ccode   <| permission == "rw-rw-rw-" |>;
   pads_h    is source ++ ".h"     :: p_ccode   <| permission == "rw-rw-rw-" |>;
   pads_o    is source ++ ".o"     :: p_objcode <| permission == "rwxrwxrwx" |>;
   pads_pxml is source ++ ".pxml"  :: p_xml     <| permission == "rw-rw-rw-" |>;  -- PADS description in xml syntax
   pads_xsd  is source ++ ".xsd"   :: p_xsd     <| permission == "rw-rw-rw-" |>;  -- xschema of xml syntax for source description
   pads_acc  is source ++ "-accum" :: p_exe     <| permission == "rwxr-xr-x" |> option;
   pads_fmt  is source ++ "-fmt"   :: p_exe     <| permission == "rwxr-xr-x" |> option;
   pads_xml  is source ++ "-xml"   :: p_exe     <| permission == "rwxr-xr-x" |> option;
};

{- Directory that store the generated output for data source named source. -}
ptype  example_d source = pdirectory {
   pads_p         is source ++ ".p"             :: p_pads   <| permission == "rw-rw-rw-" |>;    -- padsc description of data source
   pads_pml       is source ++ ".pml"           :: p_padsml <| permission == "rw-rw-rw-" |>;    -- padsml description of data source
   vanilla        is "vanilla.p"                :: p_pads   <| permission == "rw-rw-rw-" |>;    -- input tokenization
   makefile       is "GNUmakefile"              :: p_make   <| permission == "rw-rw-rw-" |>;    
   machine        is  $"AST_ARCH"               :: machineDep_t(source) <| permission == "rwxrwxrwx" |> option;   -- Platform dependent files
   accum_c        is source ++ "-accum.c"       :: p_ccode <| permission == "rw-rw-rw-" |> option;   -- template for generating accumulator output
   accum_out      is source ++ "-accum.out"     :: p_txt   <| permission == "rw-rw-rw-" |> option;   -- ASCII Accumulator output
   accum_xml_out  is source ++ "-accum_xml.out" :: p_txt   <| permission == "rw-rw-rw-" |> option;   -- XML Accumulator output
   xml_c          is source ++ "-xml.c"         :: p_ccode <| permission == "rw-rw-rw-" |> option;   -- template for generating xml output
   xml_out        is source ++ "-xml.out"       :: p_txt   <| permission == "rw-rw-rw-" |> option;   -- XML representation of source
   xml_xsd        is source ++ ".xsd"           :: p_xsd   <| permission == "rw-rw-rw-" |> option;   -- XSchema for XML representation of source
   fmt_c          is source ++ "-fmt.c"         :: p_ccode <| permission == "rw-rw-rw-" |> option;   -- template for generating fmt output
   fmt_out        is source ++ "-fmt.out"       :: p_txt   <| permission == "rw-rw-rw-" |> option;   -- Formatted representation of source
};

{- Directory that stores all information for one user. -}
ptype user_d(sources::sourceNames_f, dataSource::dataSource_d(sources))  = pdirectory {
    data        is  "data" :: data_d(sources,dataSource) <| permission == "rwxrwxrwx" |> option;
    runExamples is [    s  :: example_d s <| permission == "rwxrwxrwx" |> option | s <- sources];
  }


{- Directory stores temporary information associated with all users. -}
ptype users_d(info::info_d, dataSource::dataSource_d) = pdirectory {
    allUsers is [userDir :: user_d(sources info, dataSource) <| permission == "rwxrwxrwx" |> option
                | userDir <- userDirs(users info) ]
  }


ptype website_d(config::ppath)  = pdirectory {
  c               is config         :: config_f  <| permission == "rwxrwxr-x" |>;      -- configuration file with locations
  static_content  is static_path c  :: static_d  <| permission == "rwxrwxr-x" |>;      -- static web site content
  dynamic_content is cgi_path c     :: cgi_d     <| permission == "rwxrwxr-x" |>;      -- dynamic web site content
  scripts         is script_path c  :: scripts_d <| permission == "rwxrwxr-x" |>;      -- shell scripts invoked by cgi to run learning system
  admin_info      is static_dst c   :: info_d    <| permission == "rwxrwxr-x" |>;      -- administrative information about website
  data_dir        is (learn_home c)++"/examples/data"
                                    :: dataSource_d(sources admin_info) <| permission == "rwxrwxr-x" |>;      -- stock data files for website
  usr_data        is tmp_root c     :: users_d(admin_info, data_dir)    <| permission == "rwxrwxr-x" |>;      -- per user information
} 

let config_location = "Root/cgi-bin/PLConfig.PM"
let website :: website_d(config_location) = load config_location;

          
