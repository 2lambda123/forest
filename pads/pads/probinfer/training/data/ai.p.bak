typedef int bool;
#define true 1
#define false 0

#include "vanilla.p"
Ptypedef Pstring_ME(:"/[0-9A-Za-z\\-_\\.]+/":) PPid;
Ptypedef Pstring_ME(:"/-/":) PPpunc_hyphen
Ptypedef Pstring_ME(:"/[[]/":) PPpunc_lsqu
Ptypedef Pstring_ME(:"/[]]/":) PPpunc_rsqu
Ptypedef Pstring_ME(:"/[:]/":) PPpunc_colon
Ptypedef Pstring_ME(:"/[\"]/":) PPpunc_quote
//Ptypedef Pstring_ME(:"/[0-9A-Za-z/.]+/":) PPblob

Punion client_t {
  PPip       ip;      /- 135.207.23.32
  PPhostname host;    /- www.research.att.com
};

Punion auth_id_t {
  PPpunc_hyphen hyphen; 
  PPid id;                        
};

Penum method_t {
    GET,    PUT,  POST,  HEAD,     
    DELETE, LINK, UNLINK 
};

Pstruct version_t {
  "HTTP/";
  Puint8 major; '.';
  Puint8 minor;          
};

bool chkVersion(version_t v, method_t m) {
  if ((v.major == 1) && (v.minor == 1)) return true;
  if ((m == LINK) || (m == UNLINK)) return false;
  return true;
};

/*
Pstruct request_t {
//          PPpunc_quote q1;
  '\"';
          method_t       meth;
          PPwhite       w1;
          Pstring(:' ':) req_uri;
          PPwhite       w2;
          version_t      version : 
                  chkVersion(version, meth); 
//          PPblob b1;
//          PPpunc_quote q2;
  '\"';
};
*/

Pstruct request_t {
  '\"';   method_t       meth;     
  ' ';    Pstring(:' ':) req_uri;  
  ' ';    version_t      version : 
                  chkVersion(version, meth); 
  '\"';
};

Ptypedef Puint16_FW(:3:) response_t : 
         response_t x => { 100 <= x && x < 600};

Punion length_t {
  PPpunc_hyphen h1;
  Puint32 len;    
};

Precord Pstruct entry_t {
         client_t       client;
         PPwhite         white1;          
         auth_id_t      remoteID;
         PPwhite         white2;        
         auth_id_t      auth;
         PPwhite         white3;
         PPpunc_lsqu    lsqu;
         Pdate(:':':)   date;
         PPpunc_colon colon;
         Ptime(:' ':)    time;
         PPwhite         white4;     
         Pstring(:']':) timezone;
         PPpunc_rsqu    rsqu;
         PPwhite         white5;
         request_t      request;
         PPwhite         white6;         
         response_t     response;
         PPwhite         white7;        
         length_t        length;          
};

Psource Parray clt_t {
  entry_t [];
}
