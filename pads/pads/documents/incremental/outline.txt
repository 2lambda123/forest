                Incremental Learning of Data Formats for System Logs

1. Introduction
 - system implementers and admins need tools to help them manage, query, extract info from,
   detect errors in, and program with a variety of system logs. 
 - PADS: high level declarative specifications of physical formats
 - generates processing tools and programatic libraries and interfaces
 - automatically, incrementally learn PADS specs from sample data

2. Review 
 - ai.3000 example
 - PADS description
 - How LearnPADS works
 - LearnPADS Limitations: 
	1) main-memory algo can't handle very large data sources
        2) formats learned from a subset of data may not be correct (ai.3000 with a POST)
	3) can't handle continuous data
	4) formats learned can be un-intuitive (needs some human guidance)
 - hence we developed the incremental learning algorithm

3. The Algorithm
 - problem definition (as close to the previous description as possible) (but we don't
   have a metric to measure how close yet, do we want to mention tree edit distance??)
 - overview of algorithm: parsing + aggregating + rewriting
 - parsing algo (parse rep, score metric, pseudo-code)
 - aggregating algo (in pseudo code)
 - selection of top aggregates
 - update original description
 - rewriting rules (data independent, data dependent, OptsTable)

4. Implementation and Evaluation
 - parse metric
 - initial learn size and chunk size - these can affect results
 - update chunk by chunk 
 - optimizations/heuristics
   - memoization
   - the clean function (to reduce the number of parses)
   - merge adjacent const strings (only punctuation and white spaces)
   - control of aggregate size
   - deterministic unions
   - longest match in arrays
   - error recovery
   - parses cut-off: kill a parse if it has more than n consecutive failures in a struct

 - Experiments:
	1) comparison with old LearnPADS on several large datasets (ai.3000, asl.log, etc)
	   compare exec time and output quality (use the old cost metric)
	2) experiments on a few very large files to give audience an idea how practical the
 	   the system is

5. Future Work
  - efficiency in parsing
  - concurrent parsing (GCC)
  - quality of initial description

6. Conclusion
