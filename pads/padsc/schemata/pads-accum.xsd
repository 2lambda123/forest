<!-- Problems/Questions:

April 6, 2006: 

March 2006: 

     Union tag field is an int-accumulator (its physical type),
     but should be its abstract type.

       - Mary should fix this to be a string.

     Same issue for enums.

       - Mary should fix this to be a string.

     Should absence of accumulator info mean that no values were seen?

       - Maybe print everything. 

     nerr field accumulator is missing in generated PADS types for
     union and struct accumulators

       - Kathleen will fix this. 
-->
<xs:schema targetNamespace="http://www.padsproj.org/pads-accum.xsd"
	   xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:a="http://www.padsproj.org/pads-accum.xsd"
           xmlns:x="http://www.padsproj.org/pads-xml.xsd"
           xmlns:p="http://www.padsproj.org/pads.xsd"
           elementFormDefault="qualified"
           attributeFormDefault="qualified">

<xs:import namespace = "http://www.padsproj.org/pads.xsd"
           schemaLocation="file:/home/mff/pads/padsc/schemata/pads.xsd"/>

<xs:import namespace = "http://www.padsproj.org/pads-xml.xsd"
           schemaLocation="file:/home/mff/pads/padsc/schemata/pads-xml.xsd"/>

  <xs:element name="name" type="xs:string"/>

  <!-- Common to to all accumulators: -->
  <xs:element name="good"      type="p:Puint64"/>  
  <xs:element name="bad"       type="p:Puint64"/>  
  <xs:element name="avg"       type="p:Pfloat64"/> 
  <xs:element name="count"     type="p:Pint32"/>
  <xs:element name="top"       type="p:Puint32"/>
  <xs:element name="distinct"  type="p:Puint32"/>
  <xs:element name="nerr"      type="p:Puint32"/>

  <!-- Base type accumulators 

     We want base types to have their own notion of accum types.
     We actually accumulate using the Internal rep, but when we report, we want to use the Abstract type. 
  -->   

  <xs:complexType name="Pint_acc">
    <xs:sequence>
    <xs:element ref="a:good"/>
    <xs:element ref="a:bad"/>
    <xs:element ref="a:avg"/>
    <xs:element name="min"       type="p:Pint64"/> 
    <xs:element name="max"       type="p:Pint64"/> 
    <xs:element name="distribution" minOccurs="0">
     <xs:complexType>
      <xs:sequence>
        <xs:element ref="a:top"/>
        <xs:element ref="a:distinct"/>
        <xs:element name="item" maxOccurs="unbounded">
         <xs:complexType>
          <xs:sequence>
           <xs:element name="val" type="p:Pint64"/>
           <xs:element ref="a:count"/>
          </xs:sequence>
         </xs:complexType>
        </xs:element>
      </xs:sequence>
     </xs:complexType>
    </xs:element> 
    </xs:sequence>
  </xs:complexType>
  <xs:element name="int" type="a:Pint_acc"/>

  <xs:complexType name="Puint_acc">
    <xs:sequence>
      <xs:element ref="a:good"/>
      <xs:element ref="a:bad"/>
      <xs:element ref="a:avg"/>
      <xs:element name="min"    type="p:Puint64"/>
      <xs:element name="max"    type="p:Puint64"/>
      <xs:element name="distribution" minOccurs="0">
       <xs:complexType>
        <xs:sequence>
        <xs:element ref="a:top"/>
        <xs:element ref="a:distinct"/>
          <xs:element name="item" maxOccurs="unbounded">
           <xs:complexType>
            <xs:sequence>
             <xs:element name="val" type="p:Puint64"/>
             <xs:element ref="a:count"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
        </xs:sequence>
       </xs:complexType>
      </xs:element> 
    </xs:sequence>
  </xs:complexType>
  <xs:element name="uint" type="a:Puint_acc"/>

  <xs:complexType name="Pfloat_acc">
    <xs:sequence>
    <xs:element ref="a:good"/>
    <xs:element ref="a:bad"/>
    <xs:element ref="a:avg"/>
    <xs:element name="min" type="p:Pfloat64"/>
    <xs:element name="max" type="p:Pfloat64"/>
    <xs:element name="distribution" minOccurs="0">
     <xs:complexType>
      <xs:sequence>
        <xs:element ref="a:top"/>
        <xs:element ref="a:distinct"/>
        <xs:element name="item" maxOccurs="unbounded">
         <xs:complexType>
          <xs:sequence>
           <xs:element name="val" type="p:Pfloat64"/>
           <xs:element ref="a:count"/>
          </xs:sequence>
         </xs:complexType>
        </xs:element>
      </xs:sequence>
     </xs:complexType>
    </xs:element> 
    </xs:sequence>
  </xs:complexType>
  <xs:element name="fpoint" type="a:Pfloat_acc"/>
 
  <xs:complexType name="Pstring_acc">
    <xs:sequence>
    <xs:element name="length"    type="a:Puint_acc" minOccurs="0"/>
    <xs:element name="distribution" minOccurs="0">
     <xs:complexType>
      <xs:sequence>
        <xs:element ref="a:top"/>
        <xs:element ref="a:distinct"/>
        <xs:element name="item" maxOccurs="unbounded">
         <xs:complexType>
          <xs:sequence>
           <xs:element name="val" type="p:Pstring"/>
           <xs:element ref="a:count"/>
          </xs:sequence>
         </xs:complexType>
        </xs:element>
      </xs:sequence>
     </xs:complexType>
    </xs:element> 
    </xs:sequence>
  </xs:complexType>
  <xs:element name="string" type="a:Pstring_acc"/>

  <xs:complexType name="Pchar_acc">
    <xs:sequence>
    <xs:element ref="a:good"/>
    <xs:element ref="a:bad"/>
    <xs:element name="distribution" minOccurs="0">
     <xs:complexType>
      <xs:sequence>
        <xs:element ref="a:top"/>
        <xs:element ref="a:distinct"/>
        <xs:element name="item" maxOccurs="unbounded">
         <xs:complexType>
          <xs:sequence>
           <xs:element name="val" type="p:Pchar"/>
           <xs:element ref="a:count"/>
          </xs:sequence>
         </xs:complexType>
        </xs:element>
      </xs:sequence>
     </xs:complexType>
    </xs:element> 
    </xs:sequence>
  </xs:complexType>
  <xs:element name="char" type="a:Pchar_acc"/>

  <xs:complexType name="Ptimestamp_acc">
    <xs:sequence>
      <xs:element ref="a:good"/>
      <xs:element ref="a:bad"/>
      <xs:element name="avg" type="p:Ptimestamp"/>
      <xs:element name="min" type="p:Ptimestamp"/>
      <xs:element name="max" type="p:Ptimestamp"/>
      <xs:element name="distribution" minOccurs="0">
       <xs:complexType>
        <xs:sequence>
          <xs:element ref="a:top"/>
          <xs:element ref="a:distinct"/>
          <xs:element name="item" maxOccurs="unbounded">
           <xs:complexType>
            <xs:sequence>
             <xs:element name="val" type="p:Ptimestamp"/>
             <xs:element ref="a:count"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
        </xs:sequence>
       </xs:complexType>
      </xs:element> 
     </xs:sequence>
    </xs:complexType>
  <xs:element name="timestamp" type="a:Ptimestamp_acc"/>

  <xs:complexType name="Pdate_acc">
    <xs:sequence>
      <xs:element ref="a:good"/>
      <xs:element ref="a:bad"/>
      <xs:element name="avg" type="p:Pdate"/>
      <xs:element name="min" type="p:Pdate"/>
      <xs:element name="max" type="p:Pdate"/>
    <xs:element name="distribution" minOccurs="0">
     <xs:complexType>
      <xs:sequence>
        <xs:element ref="a:top"/>
        <xs:element ref="a:distinct"/>
        <xs:element name="item" maxOccurs="unbounded">
         <xs:complexType>
          <xs:sequence>
           <xs:element name="val" type="p:Pdate"/>
           <xs:element ref="a:count"/>
          </xs:sequence>
         </xs:complexType>
        </xs:element>
      </xs:sequence>
     </xs:complexType>
    </xs:element> 
    </xs:sequence>
  </xs:complexType>
  <xs:element name="date" type="a:Pdate_acc"/>

  <xs:complexType name="Ptime_acc">
    <xs:sequence>
      <xs:element ref="a:good"/>
      <xs:element ref="a:bad"/>
      <xs:element name="avg" type="p:Ptime"/>
      <xs:element name="min" type="p:Ptime"/>
      <xs:element name="max" type="p:Ptime"/>
      <xs:element name="distribution" minOccurs="0">
       <xs:complexType>
        <xs:sequence>
          <xs:element ref="a:top"/>
          <xs:element ref="a:distinct"/>
          <xs:element name="item" maxOccurs="unbounded">
           <xs:complexType>
            <xs:sequence>
             <xs:element name="val" type="p:Ptime"/>
             <xs:element ref="a:count"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
        </xs:sequence>
       </xs:complexType>
      </xs:element> 
    </xs:sequence>
  </xs:complexType>
  <xs:element name="time" type="a:Ptime_acc"/>

  <xs:complexType name="Pip_acc">
    <xs:sequence>
      <xs:element ref="a:good"/>
      <xs:element ref="a:bad"/>
      <xs:element name="avg" type="p:Pip"/>
      <xs:element name="min" type="p:Pip"/>
      <xs:element name="max" type="p:Pip"/>
      <xs:element name="distribution" minOccurs="0">
       <xs:complexType>
        <xs:sequence>
          <xs:element ref="a:top"/>
          <xs:element ref="a:distinct"/>
          <xs:element name="item" maxOccurs="unbounded">
           <xs:complexType>
            <xs:sequence>
             <xs:element name="val" type="p:Pip"/>
             <xs:element ref="a:count"/>
            </xs:sequence>
           </xs:complexType>
          </xs:element>
        </xs:sequence>
       </xs:complexType>
      </xs:element> 
    </xs:sequence>
  </xs:complexType>
  <xs:element name="ip" type="a:Pip_acc"/>

  <xs:complexType name="type">
    <xs:choice>
      <!-- Accumulators for the abstract base types -->
      <xs:element ref="a:char"/> 
      <xs:element ref="a:int"/> 
      <xs:element ref="a:uint"/> 
      <xs:element ref="a:fpoint"/> 
      <xs:element ref="a:string"/> 
      <xs:element ref="a:timestamp"/> 
      <xs:element ref="a:date"/> 
      <xs:element ref="a:time"/> 
      <xs:element ref="a:ip"/> 
      <!-- Accumulators for the composite types -->
      <xs:element ref="a:union"/> 
      <xs:element ref="a:struct"/> 
      <xs:element ref="a:array"/> 
      <xs:element ref="a:enum"/>
      <xs:element ref="a:typedef"/> 
    </xs:choice>
  </xs:complexType>

  <!-- Array accumulator -->
  <xs:element name="array">
   <xs:complexType>
    <xs:sequence>
      <xs:element ref="a:name"/>
      <xs:element name="length"  type="a:Puint_acc"/>

      <!-- Summary of all elements in the array -->
      <xs:element name="compoundLevel" type="a:type"/>  

      <!-- Keeps separate buckets for first N elements in histrogram
          then uses N+1st bucket for the rest (we think).
          See input parameters at bottom of schema.
      -->
      <xs:element name="arrayDetail" type="a:type"  minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:complexType>
  </xs:element>

  <!-- Enum acuumulator -->
  <!-- Internally, enums are unsigned ints, but externally, 
       they should be represented by strings.
  -->
  <xs:element name="enum" type="a:Pstring_acc"/>

  <!-- Typedef accumulator
       Error counts are tailored to typedefs. 
  -->
  <xs:element name="typedef">
   <xs:complexType>
    <xs:sequence>
      <xs:element ref="a:name"/>
      <xs:element name="type_acc" type="a:type"/>
    </xs:sequence>
   </xs:complexType>
  </xs:element>

  <!-- Union or struct field accumulator -->
  <xs:element name="field">
   <xs:complexType>
    <xs:sequence>
    <xs:element ref="a:name"/>
    <!-- type_acc absent ==> no values of field -->
    <xs:element name="type_acc" type="a:type" minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
   </xs:complexType>
  </xs:element>
  
  <!-- Struct accumulator -->
  <xs:element name="struct">
   <xs:complexType>
    <xs:sequence>
      <xs:element ref="a:name"/>
      <xs:element ref="a:nerr" minOccurs="0" maxOccurs="1"/>
      <xs:element ref="a:field" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:complexType>
  </xs:element>
  
  <!-- Union accumulator -->
  <xs:element name="union">
   <xs:complexType>
    <xs:sequence>
      <xs:element ref="a:name"/>
      <xs:element ref="a:nerr" minOccurs="0" maxOccurs="1"/>
      <xs:element name="tag"  type="a:Pint_acc"  minOccurs="0" maxOccurs="1"/>
      <xs:element ref="a:field" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:complexType>
  </xs:element>

  <!-- As in pads-xml-c.xsd, there should be a global description of the tool discipline.
 
       For now, we assume that the INPUT variables to the accumulator
       are global and are shared. 
  -->
  <xs:element name="max2track" type="p:Puint64"/>  <!-- IN: Total # buckets -->
  <xs:element name="max2rep"   type="p:Puint64"/>  <!-- IN: # of buckets to report -->
  <xs:element name="pcnt2rep"  type="p:Pfloat64"/> <!-- IN: Report buckets that only exceed this percentage. -->
  <xs:element name="tracked"   type="p:Puint64"/>  <!-- IN: Percentage of total values tracked -->

  <xs:element name="PadsAccum">
   <xs:complexType>
    <xs:sequence>
     <xs:element name="inputs" minOccurs="0">
      <xs:complexType>
       <xs:sequence>
        <xs:element ref="a:max2track"/>
        <xs:element ref="a:max2rep"/>
        <xs:element ref="a:pcnt2rep"/>
        <xs:element ref="a:tracked"/>
       </xs:sequence>
      </xs:complexType>
     </xs:element>
     <xs:element name="PSource" type="a:type"/>
    </xs:sequence>
   </xs:complexType>
  </xs:element>
</xs:schema>