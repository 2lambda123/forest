[pointer_default(ptr)] 

interface Test { 
  typedef [mltype("Nodeid.int64_pair")] struct{
    __int64 gId; 
    __int64 mId;
  } padsNID;
  typedef unsigned long childIndex; 
  typedef [abstract,finalize(free_node)] void * nodeRep; 
  typedef [mltype("nodeRep option"), c2ml(c2ml_nodeRepOpt), ml2c(ml2c_nodeRepOpt)] nodeRep nodeRepOpt;
  typedef [mltype("Physical_item.item"), c2ml(c2ml_atomicValue), ml2c(ml2c_atomicValue)] long *cAtomicValue; 
  /*  typedef [mltype("Datatypes_atomic.atomicValue"), c2ml(c2ml_atomicValue), ml2c(ml2c_atomicValue)] long *cAtomicValue;  */
  typedef [null_terminated] nodeRep nodeRepArray[]; 

  /* Need finalize(final_fn) attribute; final_fn is called when
     the Caml GC determines that the nodeRep is no longer accessible. */

  /* Might need compare(compare-fn) attribute; compare-fn is called to 
     compare to elements of the given type. */

  /* Might need errorcheck(error_fn) attribute; error_fn is called
     when a nodeRep is returned from C to Caml; can check an error
     condition and raise an exception. */

  [string] const char *name([in] nodeRep n);
  [string] const char *kind([in] nodeRep n);

  /*
  nodeRepArray children([in] nodeRep n);
  */

  nodeRepOpt kth_child([in] nodeRep n, [in] childIndex idx);
  nodeRepOpt kth_child_named([in] nodeRep n, [in] childIndex idx, [in,string] const char *name);
  padsNID get_id([in] nodeRep n);
  nodeRep parent ([in] nodeRep n);
  cAtomicValue typed_value([in] nodeRep x); 

  /*  [string] char *typed_value([in] nodeRep x); */
}
