
Sanity Check for PADS-Galax Interface
=====================================
0. Set environment variable

   setenv USE_GALAX 1 

   This will make sure the -x option is used when generating the PADS
   *.{ch} files.

1. If the PADS Compiler has changed, then in pads/padsc/examples/xml

   make -C yitzhak

   This will generate in pads/padsc/examples/gen the appropriate PADS 
   *.{ch} files.  There is a fixed collection of tests, enum.c is the
   one we use in our tests.

2. In pads/padsc/examples/xml

   make test_query_enum

   This will generate an executable that will create smart nodes over
   the enum data source.

3. In pads/padsc/examples/xml

   ./linux.i386/test_query_enum  out3.enum queries/dot.xq 

   This will run the "." query over the data source out3.enum and
   serialize the XML representation of the source.

   Either it will produce XML or it will crash.


General organization of tests:
=============================
Example PADS Descriptions are in 

	examples/p/X.p

Corresponding data files are in 
	
	examples/data/X.extension

Drivers for loading/parsing data files are in:

 	examples/tests/test_X.c

Output of regression tests is in:

 	examples/regress/test_X.regress

Tests for PADS/Galax Interface
==============================

Tests for PADS/GALAX interface are in:

	pads/padsc/examples/xml

Drivers for PADS/Galax: 

    Loading
    =======
 	gen/test_load.h :

	  (Currently,) the loading driver tests the PADS/Galax data
          model interface by reading in a pads source, creating the
          pads XML node representing that source, calling the
          padsDocument constructor to create an instance of an XML
          document, then calling Galax to serialize/print the source
          in XML.
	  test_load.h is a template for creating other tests. See
	  test_load_myenum.c for an example usage.

    Getting the Kth Child
    =====================
 	gen/test_kth_child.h :

	A simple template for testing the XXX_kth_child function.

    Querying
    ========
 	gen/test_query.h :
 
	  (Currently,) the query driver takes as input the name of a
          pads data source (that must conform to the definition X.p)
          and the name of an XQuery file containing a query to apply
          to the source.  The driver reads in the pads data source,
          creating the pads XML node representing that source, calls
          the padsDocument constructor to create an instance of an XML
          document, then applies the query to the padsDocument node,
          and serializes the result to standard output.
	  test_query.h is a template for creating other tests. See
	  test_query_myenum.c for an example usage.

	queries/test_X_*.xq:

          Example queries that can be applied to data sources that
          conform to X.p.

    NB: There are NO checks in the drivers that a-priori determine
    that the input data source matches the pads description for which
    the driver is written.
 
Project Description
===================
We (Mary Fernandez, Bob Gruber, and Kathleen Fisher) would like to
host a summer student to work on integrating XQuery with PADS.  In
particular, we would like to extend the PADS and XQuery
infrastructures to allow people to write XQuery queries against raw
data whose format has been described using PADS.  Such queries would
be compiled using Galax into a typed intermediate representation that
would invoke functions in a PADS-generated library to access the raw
data.  The summer student would work on defining the API between Galax
and PADS and translating the Galax typed intermediate representation
into C-code to link with the PADS library.

Ideally, the summer student would be a graduate student with
programming language expertise, as the work will involve a lot of
meta-programming.  We do not yet have a student in mind, but Greg
Morrisett, Benjamin Pierce, Craig Chambers, or Zhong Zhao might have
students with the appropriate skills and interests. 


    
  

