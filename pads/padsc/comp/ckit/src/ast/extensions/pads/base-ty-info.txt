# PADSL BASE TYPE INFO
#
#   This file may be found in (~kfisher/p/padsc/ckit/src/extensions/pads/base-ty-info.txt).
#
#   The PDC types and function prototypes below are defined in pads.h
#     (~kfisher/padsc/include/pads.h)
#
#   Note that the term 'on disk' below is meant to indicate the input data
#   in some data stream -- data streams need not be disk-based.
#
#   Types starting with "Pa_"    are represented on disk using ASCII character encoding.
#   Types starting with "Pe_"    are represented on disk using EBCDIC character encoding.
#   Types starting with "Pb_"    are represented on disk using raw binary encoding
#                                 (fixed number of bytes, endian-ness determined by disc setting).
#   Types starting with "Psb_"   are represented on disk using a serialized binary encoding
#                                 (variable number of bytes, low-order byte first)
#   Types starting with "Pebc_"  are represented on disk using EBCDIC numeric encoding,
#                                which stores 1 digit per byte on disk.
#   Types starting with "Pbcd_"  are represented on disk using BCD numeric encoding,
#                                which stores 2 digits per byte on disk.
# 
#   "u" represents unsigned, while its absence indicates signed.
#
#   Trailing number indicates number of bits required to store in memory; this
#   property is checked by read functions.
#
#   "_FW" suffix indicates a type where a fixed on-disk width must be specified
#   as a parameter of the type.
#
#   Examples:
#
#   Pa_uint8
#
#      An ASCII-character encoded number that must fit in 1 byte (8 bits) of #
#      memory; the width in number of chars on disk is not specified (the read #
#      function reads ASCII characters until it encounters a non-digit #
#      character).
#
#   Pa_uint8_FW(:3:)
#
#      An ASCII-character encoded number that must fit in 1 byte (8 bits) of
#      memory that is represented using exactly 3 characters on disk.
#
#   Note that "_FW" is only used when a width must be specified.  Types that
#   have only one fixed width, such as bint8, do not have the "_FW" suffix.
#
#   For the fixedpoint types, TWO parameters are required: the number of digits
#   (for the ebc_ and bcd_ fpoint types) or bytes (for the sb_ fpoint types)
#   used to encode the numerator, and the number of digits after the decimal
#   place.  Digits-after-decimal is part of the type specification, and is not
#   encoded on disk.  "_FW" is not used for this case because it does not fit
#   the pattern of the other "_FW" types.
#
#   Example:
#
#   Pbcd_ufpoint64(:4, 3:)
#
#      A fixed point number whose numerator must be unsigned and fit in 8 bytes
#      (64 bits) of memory, where the numerator is made up of 4 digits (2 BCD
#      numeric bytes).  The denominator is always 1000 (10^3).
# 

#PADS_name       numArg inMemory      mask       parseDescription     isPredOpt            scanFunctionOpt       accumulatorOpt  DiskSize     Memory(S/V) Endian

Puint8           0      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      V            S           Y
Pint8            0      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       V            S           Y
Puint8_FW        1      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      P(p1)        S           Y
Pint8_FW         1      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       P(p1)        S           Y

Puint16          0      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     V            S           Y
Pint16           0      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      V            S           Y
Puint16_FW       1      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     P(p1)        S           Y
Pint16_FW        1      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      P(p1)        S           Y

Puint32          0      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     V            S           Y
Pint32           0      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      V            S           Y
Puint32_FW       1      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     P(p1)        S           Y
Pint32_FW        1      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      P(p1)        S           Y

Puint64          0      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     V            S           Y
Pint64           0      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      V            S           Y
Puint64_FW       1      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     P(p1)        S           Y
Pint64_FW        1      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      P(p1)        S           Y

Pa_uint8         0      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      V            S           Y
Pa_int8          0      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       V            S           Y
Pa_uint8_FW      1      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      P(p1)        S           Y
Pa_int8_FW       1      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       P(p1)        S           Y

Pa_uint16        0      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     V            S           Y
Pa_int16         0      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      V            S           Y
Pa_uint16_FW     1      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     P(p1)        S           Y
Pa_int16_FW      1      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      P(p1)        S           Y

Pa_uint32        0      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     V            S           Y
Pa_int32         0      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      V            S           Y
Pa_uint32_FW     1      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     P(p1)        S           Y
Pa_int32_FW      1      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      P(p1)        S           Y

Pa_uint64        0      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     V            S           Y
Pa_int64         0      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      V            S           Y
Pa_uint64_FW     1      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     P(p1)        S           Y
Pa_int64_FW      1      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      P(p1)        S           Y

Pe_uint8         0      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      V            S           Y
Pe_int8          0      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       V            S           Y
Pe_uint8_FW      1      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      P(p1)        S           Y
Pe_int8_FW       1      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       P(p1)        S           Y

Pe_uint16        0      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     V            S           Y
Pe_int16         0      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      V            S           Y
Pe_uint16_FW     1      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     P(p1)        S           Y
Pe_int16_FW      1      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      P(p1)        S           Y

Pe_uint32        0      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     V            S           Y
Pe_int32         0      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      V            S           Y
Pe_uint32_FW     1      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     P(p1)        S           Y
Pe_int32_FW      1      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      P(p1)        S           Y

Pe_uint64        0      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     V            S           Y
Pe_int64         0      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      V            S           Y
Pe_uint64_FW     1      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     P(p1)        S           Y
Pe_int64_FW      1      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      P(p1)        S           Y

Pb_uint8         0      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      1            S           Y
Pb_int8          0      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       1            S           Y
Pb_uint16        0      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     2            S           Y
Pb_int16         0      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      2            S           Y
Pb_uint32        0      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     4            S           Y
Pb_int32         0      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      4            S           Y
Pb_uint64        0      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     8            S           Y
Pb_int64         0      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      8            S           Y

Pebc_uint8       1      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      P(p1)        S           Y
Pebc_int8        1      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       P(p1)        S           Y
Pebc_uint16      1      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     P(p1)        S           Y
Pebc_int16       1      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      P(p1)        S           Y
Pebc_uint32      1      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     P(p1)        S           Y
Pebc_int32       1      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      P(p1)        S           Y
Pebc_uint64      1      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     P(p1)        S           Y
Pebc_int64       1      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      P(p1)        S           Y

Pbcd_uint8       1      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      P((p1+2)/2)  S           Y
Pbcd_int8        1      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       P((p1+2)/2)  S           Y
Pbcd_uint16      1      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     P((p1+2)/2)  S           Y
Pbcd_int16       1      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      P((p1+2)/2)  S           Y
Pbcd_uint32      1      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     P((p1+2)/2)  S           Y
Pbcd_int32       1      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      P((p1+2)/2)  S           Y
Pbcd_uint64      1      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     P((p1+2)/2)  S           Y
Pbcd_int64       1      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      P((p1+2)/2)  S           Y

Psbl_uint8       1      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      P(p1)        S           Y
Psbl_int8        1      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       P(p1)        S           Y
Psbl_uint16      1      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     P(p1)        S           Y
Psbl_int16       1      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      P(p1)        S           Y
Psbl_uint32      1      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     P(p1)        S           Y
Psbl_int32       1      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      P(p1)        S           Y
Psbl_uint64      1      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     P(p1)        S           Y
Psbl_int64       1      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      P(p1)        S           Y

Psbh_uint8       1      Puint8        Pbase_m    Pbase_pd             -                    -                     Puint8_acc      P(p1)        S           Y
Psbh_int8        1      Pint8         Pbase_m    Pbase_pd             -                    -                     Pint8_acc       P(p1)        S           Y
Psbh_uint16      1      Puint16       Pbase_m    Pbase_pd             -                    -                     Puint16_acc     P(p1)        S           Y
Psbh_int16       1      Pint16        Pbase_m    Pbase_pd             -                    -                     Pint16_acc      P(p1)        S           Y
Psbh_uint32      1      Puint32       Pbase_m    Pbase_pd             -                    -                     Puint32_acc     P(p1)        S           Y
Psbh_int32       1      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      P(p1)        S           Y
Psbh_uint64      1      Puint64       Pbase_m    Pbase_pd             -                    -                     Puint64_acc     P(p1)        S           Y
Psbh_int64       1      Pint64        Pbase_m    Pbase_pd             -                    -                     Pint64_acc      P(p1)        S           Y

Pebc_ufpoint8    2      Pufpoint8     Pbase_m    Pbase_pd             -                    -                     Pufpoint8_acc   P(p1)        S           Y
Pebc_fpoint8     2      Pfpoint8      Pbase_m    Pbase_pd             -                    -                     Pfpoint8_acc    P(p1)        S           Y
Pebc_ufpoint16   2      Pufpoint16    Pbase_m    Pbase_pd             -                    -                     Pufpoint16_acc  P(p1)        S           Y
Pebc_fpoint16    2      Pfpoint16     Pbase_m    Pbase_pd             -                    -                     Pfpoint16_acc   P(p1)        S           Y
Pebc_ufpoint32   2      Pufpoint32    Pbase_m    Pbase_pd             -                    -                     Pufpoint32_acc  P(p1)        S           Y
Pebc_fpoint32    2      Pfpoint32     Pbase_m    Pbase_pd             -                    -                     Pfpoint32_acc   P(p1)        S           Y
Pebc_ufpoint64   2      Pufpoint64    Pbase_m    Pbase_pd             -                    -                     Pufpoint64_acc  P(p1)        S           Y
Pebc_fpoint64    2      Pfpoint64     Pbase_m    Pbase_pd             -                    -                     Pfpoint64_acc   P(p1)        S           Y

Pbcd_ufpoint8    2      Pufpoint8     Pbase_m    Pbase_pd             -                    -                     Pufpoint8_acc   P((p1+2)/2)  S           Y
Pbcd_fpoint8     2      Pfpoint8      Pbase_m    Pbase_pd             -                    -                     Pfpoint8_acc    P((p1+2)/2)  S           Y
Pbcd_ufpoint16   2      Pufpoint16    Pbase_m    Pbase_pd             -                    -                     Pufpoint16_acc  P((p1+2)/2)  S           Y
Pbcd_fpoint16    2      Pfpoint16     Pbase_m    Pbase_pd             -                    -                     Pfpoint16_acc   P((p1+2)/2)  S           Y
Pbcd_ufpoint32   2      Pufpoint32    Pbase_m    Pbase_pd             -                    -                     Pufpoint32_acc  P((p1+2)/2)  S           Y
Pbcd_fpoint32    2      Pfpoint32     Pbase_m    Pbase_pd             -                    -                     Pfpoint32_acc   P((p1+2)/2)  S           Y
Pbcd_ufpoint64   2      Pufpoint64    Pbase_m    Pbase_pd             -                    -                     Pufpoint64_acc  P((p1+2)/2)  S           Y
Pbcd_fpoint64    2      Pfpoint64     Pbase_m    Pbase_pd             -                    -                     Pfpoint64_acc   P((p1+2)/2)  S           Y

Psbl_ufpoint8    2      Pufpoint8     Pbase_m    Pbase_pd             -                    -                     Pufpoint8_acc   P(p1)        S           Y
Psbl_fpoint8     2      Pfpoint8      Pbase_m    Pbase_pd             -                    -                     Pfpoint8_acc    P(p1)        S           Y
Psbl_ufpoint16   2      Pufpoint16    Pbase_m    Pbase_pd             -                    -                     Pufpoint16_acc  P(p1)        S           Y
Psbl_fpoint16    2      Pfpoint16     Pbase_m    Pbase_pd             -                    -                     Pfpoint16_acc   P(p1)        S           Y
Psbl_ufpoint32   2      Pufpoint32    Pbase_m    Pbase_pd             -                    -                     Pufpoint32_acc  P(p1)        S           Y
Psbl_fpoint32    2      Pfpoint32     Pbase_m    Pbase_pd             -                    -                     Pfpoint32_acc   P(p1)        S           Y
Psbl_ufpoint64   2      Pufpoint64    Pbase_m    Pbase_pd             -                    -                     Pufpoint64_acc  P(p1)        S           Y
Psbl_fpoint64    2      Pfpoint64     Pbase_m    Pbase_pd             -                    -                     Pfpoint64_acc   P(p1)        S           Y

Psbh_ufpoint8    2      Pufpoint8     Pbase_m    Pbase_pd             -                    -                     Pufpoint8_acc   P(p1)        S           Y
Psbh_fpoint8     2      Pfpoint8      Pbase_m    Pbase_pd             -                    -                     Pfpoint8_acc    P(p1)        S           Y
Psbh_ufpoint16   2      Pufpoint16    Pbase_m    Pbase_pd             -                    -                     Pufpoint16_acc  P(p1)        S           Y
Psbh_fpoint16    2      Pfpoint16     Pbase_m    Pbase_pd             -                    -                     Pfpoint16_acc   P(p1)        S           Y
Psbh_ufpoint32   2      Pufpoint32    Pbase_m    Pbase_pd             -                    -                     Pufpoint32_acc  P(p1)        S           Y
Psbh_fpoint32    2      Pfpoint32     Pbase_m    Pbase_pd             -                    -                     Pfpoint32_acc   P(p1)        S           Y
Psbh_ufpoint64   2      Pufpoint64    Pbase_m    Pbase_pd             -                    -                     Pufpoint64_acc  P(p1)        S           Y
Psbh_fpoint64    2      Pfpoint64     Pbase_m    Pbase_pd             -                    -                     Pfpoint64_acc   P(p1)        S           Y

# pchar/a_char/e_char : a single character on disk

Pchar            0      Pchar         Pbase_m    Pbase_pd             -                    -                     Pchar_acc       1            S           N
Pa_char          0      Pchar         Pbase_m    Pbase_pd             -                    -                     Pchar_acc       1            S           N
Pe_char          0      Pchar         Pbase_m    Pbase_pd             -                    -                     Pchar_acc       1            S           N

# The following string types are for a sequence of ASCII/EBCDIC characters on disk; Pstring in memory.
# The difference is in how the extent of the string is specified. 
#   *string_FW   : takes width as a parameter.
#   *string      : takes terminating character as a parameter.
#   *string_ME   : takes a Match Expression as parameter (a string containing a regular expression)
#   *string_CME  : takes a Compiled Match Expression as parameter
#   *string_SE   : takes a Stop Expression as parameter (a string containing a regular expression)
#   *string_CSE  : takes a Compiled Stop Expression as parameter 
#                  Note: pads.h describes syntax of regular expressions -- currently quite limited --
#                        (see Pregexp_compile for regular expression compilation).

Pstring          1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pa_string        1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pe_string        1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N

Pstring_FW       1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     P(p1)        V           N
Pa_string_FW     1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     P(p1)        V           N
Pe_string_FW     1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     P(p1)        V           N

Pstring_ME       1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pa_string_ME     1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pe_string_ME     1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N

Pstring_CME      1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pa_string_CME    1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pe_string_CME    1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N

Pstring_SE       1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pa_string_SE     1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pe_string_SE     1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N

Pstring_CSE      1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pa_string_CSE    1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N
Pe_string_CSE    1      Pstring       Pbase_m    Pbase_pd             -                    -                     Pstring_acc     V            V           N

# *date: Converts ASCII/EBCDIC char date description into seconds since Midnight Jan 1, 1970.  Based on libast's tmdate function.

Pdate            1      Puint32       Pbase_m    Pbase_pd             -                    -                     -                  V            S           N
Pa_date          1      Puint32       Pbase_m    Pbase_pd             -                    -                     -                  V            S           N
Pe_date          1      Puint32       Pbase_m    Pbase_pd             -                    -                     -                  V            S           N

# *ipaddr: Converts ASCII/EBCDIC numeric IP address (dotted form) into a Puint32.  Based on libast's strtoip4 function.

Pipaddr          1      Puint32       Pbase_m    Pbase_pd             -                    -                     -                  V            S           N
Pa_ipaddr        1      Puint32       Pbase_m    Pbase_pd             -                    -                     -                  V            S           N
Pe_ipaddr        1      Puint32       Pbase_m    Pbase_pd             -                    -                     -                  V            S           N

# *countX   is a counter data type that is parameterized by an ASCII count char (X)
#           and represents the number of ASCII/EBCDIC X chars between the current IO position and the first EOR/EOF
#           a second param indicates whether encountering EOF before EOR is an error (0 means no, 1 means yes) and
#           a third param, if > 0, sets a total character scan limit: if the limit is reached before EOR/EOF,
#           an error occurs.  Examples:
#
#           e_countX(:'|', 1, 0:) counts the number of EBCDIC vertical bars between the current IO position and
#           the remainder of the current record, where an error occurs if EOF prior to detecting EOR.
#
#           e_countX(:'|', 1, 1024:) is the same, except there is also an error if EOR is not encountered
#           with 1024 characters of the current IO position.
#
# *countXtoY is a counter data type that is parameterized by ASCII count char (X) and terminating char (Y),
#           and represents the number of ASCII/EBCDIC X chars between the current IO position and the first Y char.
#           Like countX, it also has a final param to set a scan limit.
#           E.g., e_countXtoY(:'|', '+', 0:) counts the number of EBCDIC vertical bars between the current
#           IO position and the first occurence of an EBCDIC plus.

PcountX          3      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      0            S           N
Pa_countX        3      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      0            S           N
Pe_countX        3      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      0            S           N

PcountXtoY       3      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      0            S           N
Pa_countXtoY     3      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      0            S           N
Pe_countXtoY     3      Pint32        Pbase_m    Pbase_pd             -                    -                     Pint32_acc      0            S           N

